/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "FreeRTOS.h"
#include "task.h"
#include"queue.h"
#include "semphr.h"
#define DWT_CYCNT_EN ((volatile uint32_t *)0xE0001000)
//#include "cmsis_os.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
QueueHandle_t myque1,myque2,myque3;
SemaphoreHandle_t mysem;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

void task1(void *ptr)
{
	xSemaphoreTake(mysem,portMAX_DELAY);
	uint8_t data1=1;
	for(;;){
		xQueueSend(myque1,&data1,portMAX_DELAY);
	}
}
void task2(void *ptr)
{
	//vTaskDelay(100);
	uint8_t data2;
	for(;;){
		xQueueReceive(myque1, &data2, portMAX_DELAY);
		xQueueSend(myque2,&data2,portMAX_DELAY);
	}
}
void task3(void *ptr)
{
	//vTaskDelay(100);
	uint8_t data3;
	for(;;){
		xQueueReceive(myque2, &data3, portMAX_DELAY);
		xQueueSend(myque3,&data3,portMAX_DELAY);
	}
}
void task4(void *ptr)
{
	//vTaskDelay(100);
	uint8_t data4;
	xQueueReceive(myque3, &data4, portMAX_DELAY);
	for(;;){
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
			//HAL_GPIO_TogglePin((GPIOD, GPIO_PIN_12 || GPIO_PIN_13 || GPIO_PIN_14 ||GPIO_PIN_15);
			vTaskDelay(200);
	}
}




/*
void task1(void *ptr)
{

	TickType_t task_100 = pdMS_TO_TICKS(100);
	//vTaskDelay(2);
	vTaskDelay(task_100);
	for(;;){
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
		//vTaskDelay(100);
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
		//vTaskDelay(100);
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
		//vTaskDelay(100);
		//HAL_Delay(100);
		//taskYIELD();
		//vTaskDelete(NULL);
			xSemaphoreTake(mysem,portMAX_DELAY);
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
			//xSemaphoreGive(mysem);
	}
}

void task2(void *ptr)
{

	//TickType_t task_200 = pdMS_TO_TICKS(500);
	//vTaskDelay(4); //vTaskDelay(200);
	for(;;){
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
		//HAL_Delay(100);
		vTaskDelay(500);
		//taskYIELD();
		//vTaskDelete(NULL);
	}
}

void LED3(void *ptr)
{
	//TickType_t task_300 = pdMS_TO_TICKS(300);
	vTaskDelay(6); //vTaskDelay(300);
	for(;;){
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
		//HAL_Delay(100);
		vTaskDelay(100);
		//taskYIELD();
		//vTaskDelete(NULL);
	}
}

void switch_Task(void *ptr)
{
	//volatile uint8_t flag=1;
	//vTaskSuspendAll();
	//TickType_t task_400 = pdMS_TO_TICKS(6);
	//vTaskDelay(task_400);
	vSemaphoreCreateBinary(sem_task);
	for(;;){
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
		//HAL_Delay(700);
		//taskYIELD();
		//vTaskDelete(NULL);
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1){
			//flag=0;
			//xTaskResumeAll();
			xSemaphoreTake(sem_task,0);

		}
	}
} */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

  *DWT_CYCNT_EN = *DWT_CYCNT_EN | (1 << 0);

  SEGGER_SYSVIEW_Conf();
  SEGGER_SYSVIEW_Start();

  /*mysem = xSemaphoreCreateMutex();
    if (mysem == NULL) {
    	  while(1);
    }
    xSemaphoreTake(mysem,portMAX_DELAY);

  xTaskCreate(task1, "task1", 200, NULL, 3, NULL);
  xTaskCreate(task2, "task2", 200, NULL, 1, NULL); */
  myque1=xQueueCreate(1,1);
  myque2=xQueueCreate(1,1);
  myque3=xQueueCreate(1,1);

  mysem = xSemaphoreCreateMutex();
  if (mysem == NULL) {
	  while(1);
  }
  xSemaphoreTake(mysem,portMAX_DELAY);

  xTaskCreate(task1, "task1", 200, NULL, 1, NULL);
  xTaskCreate(task2, "task2", 200, NULL, 2, NULL);
  xTaskCreate(task3, "task3", 200, NULL, 3, NULL);
  xTaskCreate(task4, "task4", 200, NULL, 4, NULL);

  vTaskStartScheduler();   /* ---Starting scheduler*/

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == GPIO_PIN_0){
		xSemaphoreGiveFromISR(mysem,NULL);
	}
}
/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM5 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

