
FreeRTOS_manual_3_2705.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08006028  08006028  00016028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006154  08006154  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006154  08006154  00016154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800615c  0800615c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800615c  0800615c  0001615c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006160  08006160  00016160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          0001448c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144a0  200144a0  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000155c1  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fb8  00000000  00000000  00035605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  000385c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001240  00000000  00000000  00039988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f81  00000000  00000000  0003abc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000159db  00000000  00000000  0005db49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7585  00000000  00000000  00073524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014aaa9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052ac  00000000  00000000  0014aafc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006010 	.word	0x08006010

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006010 	.word	0x08006010

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ec4 	.word	0x20012ec4

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <task1>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

void task1(void *ptr)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	//uint8_t data1=1;
	for(;;){
		//xQueueSend(myque1,&data1,portMAX_DELAY);
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000570:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000574:	4803      	ldr	r0, [pc, #12]	; (8000584 <task1+0x1c>)
 8000576:	f000 fd16 	bl	8000fa6 <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 800057a:	2064      	movs	r0, #100	; 0x64
 800057c:	f002 f99a 	bl	80028b4 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000580:	e7f6      	b.n	8000570 <task1+0x8>
 8000582:	bf00      	nop
 8000584:	40020c00 	.word	0x40020c00

08000588 <task2>:
	}
}
void task2(void *ptr)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	//uint8_t data2;
	for(;;){
		//xQueueReceive(myque1, &data2, portMAX_DELAY);
		//xQueueSend(myque2,&data2,portMAX_DELAY);
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000590:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <task2+0x1c>)
 8000596:	f000 fd06 	bl	8000fa6 <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 800059a:	2064      	movs	r0, #100	; 0x64
 800059c:	f002 f98a 	bl	80028b4 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005a0:	e7f6      	b.n	8000590 <task2+0x8>
 80005a2:	bf00      	nop
 80005a4:	40020c00 	.word	0x40020c00

080005a8 <task3>:
	}
}
void task3(void *ptr)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	//uint8_t data3;
	for(;;){
		//xQueueReceive(myque2, &data3, portMAX_DELAY);
		//xQueueSend(myque3,&data3,portMAX_DELAY);
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80005b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <task3+0x1c>)
 80005b6:	f000 fcf6 	bl	8000fa6 <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 80005ba:	2064      	movs	r0, #100	; 0x64
 80005bc:	f002 f97a 	bl	80028b4 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80005c0:	e7f6      	b.n	80005b0 <task3+0x8>
 80005c2:	bf00      	nop
 80005c4:	40020c00 	.word	0x40020c00

080005c8 <task4>:
	}
}
void task4(void *ptr)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	//uint8_t data4;
	//xQueueReceive(myque3, &data4, portMAX_DELAY);
	for(;;){
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80005d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <task4+0x1c>)
 80005d6:	f000 fce6 	bl	8000fa6 <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 80005da:	2064      	movs	r0, #100	; 0x64
 80005dc:	f002 f96a 	bl	80028b4 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80005e0:	e7f6      	b.n	80005d0 <task4+0x8>
 80005e2:	bf00      	nop
 80005e4:	40020c00 	.word	0x40020c00

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80005ee:	f000 fa01 	bl	80009f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f849 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f8b1 	bl	800075c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  *DWT_CYCNT_EN = *DWT_CYCNT_EN | (1 << 0);
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <main+0x7c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a19      	ldr	r2, [pc, #100]	; (8000664 <main+0x7c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000606:	f003 ff0b 	bl	8004420 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800060a:	f004 fe85 	bl	8005318 <SEGGER_SYSVIEW_Start>
   //myque1=xQueueCreate(1,1);
  // myque2=xQueueCreate(1,1);
  // myque3=xQueueCreate(1,1);


  xTaskCreate(task1, "task1", 200, NULL, 5, NULL);
 800060e:	2300      	movs	r3, #0
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	2305      	movs	r3, #5
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2300      	movs	r3, #0
 8000618:	22c8      	movs	r2, #200	; 0xc8
 800061a:	4913      	ldr	r1, [pc, #76]	; (8000668 <main+0x80>)
 800061c:	4813      	ldr	r0, [pc, #76]	; (800066c <main+0x84>)
 800061e:	f001 ffc1 	bl	80025a4 <xTaskCreate>
  xTaskCreate(task2, "task2", 200, NULL, 2, NULL);
 8000622:	2300      	movs	r3, #0
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2302      	movs	r3, #2
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	22c8      	movs	r2, #200	; 0xc8
 800062e:	4910      	ldr	r1, [pc, #64]	; (8000670 <main+0x88>)
 8000630:	4810      	ldr	r0, [pc, #64]	; (8000674 <main+0x8c>)
 8000632:	f001 ffb7 	bl	80025a4 <xTaskCreate>
  xTaskCreate(task3, "task3", 200, NULL, 3, NULL);
 8000636:	2300      	movs	r3, #0
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2303      	movs	r3, #3
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2300      	movs	r3, #0
 8000640:	22c8      	movs	r2, #200	; 0xc8
 8000642:	490d      	ldr	r1, [pc, #52]	; (8000678 <main+0x90>)
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <main+0x94>)
 8000646:	f001 ffad 	bl	80025a4 <xTaskCreate>
  xTaskCreate(task4, "task4", 200, NULL, 4, NULL);
 800064a:	2300      	movs	r3, #0
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	2304      	movs	r3, #4
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2300      	movs	r3, #0
 8000654:	22c8      	movs	r2, #200	; 0xc8
 8000656:	490a      	ldr	r1, [pc, #40]	; (8000680 <main+0x98>)
 8000658:	480a      	ldr	r0, [pc, #40]	; (8000684 <main+0x9c>)
 800065a:	f001 ffa3 	bl	80025a4 <xTaskCreate>

  vTaskStartScheduler();   /* ---Starting scheduler*/
 800065e:	f002 f961 	bl	8002924 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000662:	e7fe      	b.n	8000662 <main+0x7a>
 8000664:	e0001000 	.word	0xe0001000
 8000668:	08006028 	.word	0x08006028
 800066c:	08000569 	.word	0x08000569
 8000670:	08006030 	.word	0x08006030
 8000674:	08000589 	.word	0x08000589
 8000678:	08006038 	.word	0x08006038
 800067c:	080005a9 	.word	0x080005a9
 8000680:	08006040 	.word	0x08006040
 8000684:	080005c9 	.word	0x080005c9

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	; 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f005 fcb2 	bl	8006000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b28      	ldr	r3, [pc, #160]	; (8000754 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a27      	ldr	r2, [pc, #156]	; (8000754 <SystemClock_Config+0xcc>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b25      	ldr	r3, [pc, #148]	; (8000754 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a21      	ldr	r2, [pc, #132]	; (8000758 <SystemClock_Config+0xd0>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f8:	2308      	movs	r3, #8
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006fc:	23a8      	movs	r3, #168	; 0xa8
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fc65 	bl	8000fdc <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000718:	f000 f866 	bl	80007e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2302      	movs	r3, #2
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2105      	movs	r1, #5
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fec6 	bl	80014cc <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000746:	f000 f84f 	bl	80007e8 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3750      	adds	r7, #80	; 0x50
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_GPIO_Init+0x60>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	4a10      	ldr	r2, [pc, #64]	; (80007bc <MX_GPIO_Init+0x60>)
 800077a:	f043 0308 	orr.w	r3, r3, #8
 800077e:	6313      	str	r3, [r2, #48]	; 0x30
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_GPIO_Init+0x60>)
 8000782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000784:	f003 0308 	and.w	r3, r3, #8
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000792:	480b      	ldr	r0, [pc, #44]	; (80007c0 <MX_GPIO_Init+0x64>)
 8000794:	f000 fbee 	bl	8000f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000798:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800079c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2301      	movs	r3, #1
 80007a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4619      	mov	r1, r3
 80007ae:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_GPIO_Init+0x64>)
 80007b0:	f000 fa44 	bl	8000c3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b4:	bf00      	nop
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020c00 	.word	0x40020c00

080007c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d101      	bne.n	80007da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007d6:	f000 f92f 	bl	8000a38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40000c00 	.word	0x40000c00

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <Error_Handler+0x8>
	...

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <HAL_MspInit+0x4c>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000808:	6453      	str	r3, [r2, #68]	; 0x44
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <HAL_MspInit+0x4c>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 8000832:	f003 fa71 	bl	8003d18 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08e      	sub	sp, #56	; 0x38
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000850:	2300      	movs	r3, #0
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	4b33      	ldr	r3, [pc, #204]	; (8000928 <HAL_InitTick+0xe4>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	4a32      	ldr	r2, [pc, #200]	; (8000928 <HAL_InitTick+0xe4>)
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	6413      	str	r3, [r2, #64]	; 0x40
 8000864:	4b30      	ldr	r3, [pc, #192]	; (8000928 <HAL_InitTick+0xe4>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	f003 0308 	and.w	r3, r3, #8
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000870:	f107 0210 	add.w	r2, r7, #16
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4611      	mov	r1, r2
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fff2 	bl	8001864 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000880:	6a3b      	ldr	r3, [r7, #32]
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000886:	2b00      	cmp	r3, #0
 8000888:	d103      	bne.n	8000892 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800088a:	f000 ffd7 	bl	800183c <HAL_RCC_GetPCLK1Freq>
 800088e:	6378      	str	r0, [r7, #52]	; 0x34
 8000890:	e004      	b.n	800089c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000892:	f000 ffd3 	bl	800183c <HAL_RCC_GetPCLK1Freq>
 8000896:	4603      	mov	r3, r0
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800089c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800089e:	4a23      	ldr	r2, [pc, #140]	; (800092c <HAL_InitTick+0xe8>)
 80008a0:	fba2 2303 	umull	r2, r3, r2, r3
 80008a4:	0c9b      	lsrs	r3, r3, #18
 80008a6:	3b01      	subs	r3, #1
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <HAL_InitTick+0xec>)
 80008ac:	4a21      	ldr	r2, [pc, #132]	; (8000934 <HAL_InitTick+0xf0>)
 80008ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <HAL_InitTick+0xec>)
 80008b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008b6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80008b8:	4a1d      	ldr	r2, [pc, #116]	; (8000930 <HAL_InitTick+0xec>)
 80008ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008bc:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <HAL_InitTick+0xec>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <HAL_InitTick+0xec>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <HAL_InitTick+0xec>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80008d0:	4817      	ldr	r0, [pc, #92]	; (8000930 <HAL_InitTick+0xec>)
 80008d2:	f000 fff9 	bl	80018c8 <HAL_TIM_Base_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d11b      	bne.n	800091c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80008e4:	4812      	ldr	r0, [pc, #72]	; (8000930 <HAL_InitTick+0xec>)
 80008e6:	f001 f849 	bl	800197c <HAL_TIM_Base_Start_IT>
 80008ea:	4603      	mov	r3, r0
 80008ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d111      	bne.n	800091c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80008f8:	2032      	movs	r0, #50	; 0x32
 80008fa:	f000 f991 	bl	8000c20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d808      	bhi.n	8000916 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000904:	2200      	movs	r2, #0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	2032      	movs	r0, #50	; 0x32
 800090a:	f000 f96d 	bl	8000be8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <HAL_InitTick+0xf4>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	e002      	b.n	800091c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800091c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000920:	4618      	mov	r0, r3
 8000922:	3738      	adds	r7, #56	; 0x38
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	431bde83 	.word	0x431bde83
 8000930:	20000030 	.word	0x20000030
 8000934:	40000c00 	.word	0x40000c00
 8000938:	20000004 	.word	0x20000004

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <NMI_Handler+0x4>

08000942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <HardFault_Handler+0x4>

08000948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <MemManage_Handler+0x4>

0800094e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <BusFault_Handler+0x4>

08000954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <UsageFault_Handler+0x4>

0800095a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <TIM5_IRQHandler+0x10>)
 800096e:	f001 f875 	bl	8001a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000030 	.word	0x20000030

0800097c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <SystemInit+0x20>)
 8000982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <SystemInit+0x20>)
 8000988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800098c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009a6:	490e      	ldr	r1, [pc, #56]	; (80009e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009a8:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009bc:	4c0b      	ldr	r4, [pc, #44]	; (80009ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009ca:	f7ff ffd7 	bl	800097c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ce:	f005 fad5 	bl	8005f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009d2:	f7ff fe09 	bl	80005e8 <main>
  bx  lr    
 80009d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80009e4:	08006164 	.word	0x08006164
  ldr r2, =_sbss
 80009e8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80009ec:	200144a0 	.word	0x200144a0

080009f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC_IRQHandler>
	...

080009f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_Init+0x40>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <HAL_Init+0x40>)
 80009fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <HAL_Init+0x40>)
 8000a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <HAL_Init+0x40>)
 8000a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 f8d8 	bl	8000bd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a22:	200f      	movs	r0, #15
 8000a24:	f7ff ff0e 	bl	8000844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a28:	f7ff fee4 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023c00 	.word	0x40023c00

08000a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_IncTick+0x20>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_IncTick+0x24>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4413      	add	r3, r2
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_IncTick+0x24>)
 8000a4a:	6013      	str	r3, [r2, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	20000078 	.word	0x20000078

08000a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return uwTick;
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <HAL_GetTick+0x14>)
 8000a66:	681b      	ldr	r3, [r3, #0]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000078 	.word	0x20000078

08000a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	f003 0307 	and.w	r3, r3, #7
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	db0b      	blt.n	8000b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f003 021f 	and.w	r2, r3, #31
 8000af4:	4907      	ldr	r1, [pc, #28]	; (8000b14 <__NVIC_EnableIRQ+0x38>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	095b      	lsrs	r3, r3, #5
 8000afc:	2001      	movs	r0, #1
 8000afe:	fa00 f202 	lsl.w	r2, r0, r2
 8000b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000e100 	.word	0xe000e100

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	; (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	; (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	bf28      	it	cs
 8000b8a:	2304      	movcs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3304      	adds	r3, #4
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d902      	bls.n	8000b9c <NVIC_EncodePriority+0x30>
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3b03      	subs	r3, #3
 8000b9a:	e000      	b.n	8000b9e <NVIC_EncodePriority+0x32>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43d9      	mvns	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	4313      	orrs	r3, r2
         );
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3724      	adds	r7, #36	; 0x24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ff4c 	bl	8000a78 <__NVIC_SetPriorityGrouping>
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
 8000bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bfa:	f7ff ff61 	bl	8000ac0 <__NVIC_GetPriorityGrouping>
 8000bfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	68b9      	ldr	r1, [r7, #8]
 8000c04:	6978      	ldr	r0, [r7, #20]
 8000c06:	f7ff ffb1 	bl	8000b6c <NVIC_EncodePriority>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff80 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c18:	bf00      	nop
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff54 	bl	8000adc <__NVIC_EnableIRQ>
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
 8000c56:	e16b      	b.n	8000f30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c58:	2201      	movs	r2, #1
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f040 815a 	bne.w	8000f2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0303 	and.w	r3, r3, #3
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d005      	beq.n	8000c8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d130      	bne.n	8000cf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	2203      	movs	r2, #3
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	68da      	ldr	r2, [r3, #12]
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	091b      	lsrs	r3, r3, #4
 8000cda:	f003 0201 	and.w	r2, r3, #1
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d017      	beq.n	8000d2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2203      	movs	r2, #3
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d123      	bne.n	8000d80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	08da      	lsrs	r2, r3, #3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3208      	adds	r2, #8
 8000d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	f003 0307 	and.w	r3, r3, #7
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	220f      	movs	r2, #15
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	691a      	ldr	r2, [r3, #16]
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	08da      	lsrs	r2, r3, #3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3208      	adds	r2, #8
 8000d7a:	69b9      	ldr	r1, [r7, #24]
 8000d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0203 	and.w	r2, r3, #3
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f000 80b4 	beq.w	8000f2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b60      	ldr	r3, [pc, #384]	; (8000f48 <HAL_GPIO_Init+0x30c>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	4a5f      	ldr	r2, [pc, #380]	; (8000f48 <HAL_GPIO_Init+0x30c>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd2:	4b5d      	ldr	r3, [pc, #372]	; (8000f48 <HAL_GPIO_Init+0x30c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dde:	4a5b      	ldr	r2, [pc, #364]	; (8000f4c <HAL_GPIO_Init+0x310>)
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3302      	adds	r3, #2
 8000de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	220f      	movs	r2, #15
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a52      	ldr	r2, [pc, #328]	; (8000f50 <HAL_GPIO_Init+0x314>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d02b      	beq.n	8000e62 <HAL_GPIO_Init+0x226>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a51      	ldr	r2, [pc, #324]	; (8000f54 <HAL_GPIO_Init+0x318>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d025      	beq.n	8000e5e <HAL_GPIO_Init+0x222>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a50      	ldr	r2, [pc, #320]	; (8000f58 <HAL_GPIO_Init+0x31c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d01f      	beq.n	8000e5a <HAL_GPIO_Init+0x21e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4f      	ldr	r2, [pc, #316]	; (8000f5c <HAL_GPIO_Init+0x320>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d019      	beq.n	8000e56 <HAL_GPIO_Init+0x21a>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a4e      	ldr	r2, [pc, #312]	; (8000f60 <HAL_GPIO_Init+0x324>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d013      	beq.n	8000e52 <HAL_GPIO_Init+0x216>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a4d      	ldr	r2, [pc, #308]	; (8000f64 <HAL_GPIO_Init+0x328>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d00d      	beq.n	8000e4e <HAL_GPIO_Init+0x212>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a4c      	ldr	r2, [pc, #304]	; (8000f68 <HAL_GPIO_Init+0x32c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d007      	beq.n	8000e4a <HAL_GPIO_Init+0x20e>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4b      	ldr	r2, [pc, #300]	; (8000f6c <HAL_GPIO_Init+0x330>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d101      	bne.n	8000e46 <HAL_GPIO_Init+0x20a>
 8000e42:	2307      	movs	r3, #7
 8000e44:	e00e      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e46:	2308      	movs	r3, #8
 8000e48:	e00c      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	e00a      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e4e:	2305      	movs	r3, #5
 8000e50:	e008      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e52:	2304      	movs	r3, #4
 8000e54:	e006      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e56:	2303      	movs	r3, #3
 8000e58:	e004      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	e002      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e62:	2300      	movs	r3, #0
 8000e64:	69fa      	ldr	r2, [r7, #28]
 8000e66:	f002 0203 	and.w	r2, r2, #3
 8000e6a:	0092      	lsls	r2, r2, #2
 8000e6c:	4093      	lsls	r3, r2
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e74:	4935      	ldr	r1, [pc, #212]	; (8000f4c <HAL_GPIO_Init+0x310>)
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e82:	4b3b      	ldr	r3, [pc, #236]	; (8000f70 <HAL_GPIO_Init+0x334>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ea6:	4a32      	ldr	r2, [pc, #200]	; (8000f70 <HAL_GPIO_Init+0x334>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eac:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <HAL_GPIO_Init+0x334>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ed0:	4a27      	ldr	r2, [pc, #156]	; (8000f70 <HAL_GPIO_Init+0x334>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ed6:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <HAL_GPIO_Init+0x334>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000efa:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <HAL_GPIO_Init+0x334>)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <HAL_GPIO_Init+0x334>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f24:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <HAL_GPIO_Init+0x334>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	2b0f      	cmp	r3, #15
 8000f34:	f67f ae90 	bls.w	8000c58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40013800 	.word	0x40013800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	40020400 	.word	0x40020400
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	40020c00 	.word	0x40020c00
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40021400 	.word	0x40021400
 8000f68:	40021800 	.word	0x40021800
 8000f6c:	40021c00 	.word	0x40021c00
 8000f70:	40013c00 	.word	0x40013c00

08000f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	807b      	strh	r3, [r7, #2]
 8000f80:	4613      	mov	r3, r2
 8000f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f84:	787b      	ldrb	r3, [r7, #1]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f8a:	887a      	ldrh	r2, [r7, #2]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f90:	e003      	b.n	8000f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	041a      	lsls	r2, r3, #16
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	619a      	str	r2, [r3, #24]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b085      	sub	sp, #20
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fb8:	887a      	ldrh	r2, [r7, #2]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	041a      	lsls	r2, r3, #16
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	43d9      	mvns	r1, r3
 8000fc4:	887b      	ldrh	r3, [r7, #2]
 8000fc6:	400b      	ands	r3, r1
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	619a      	str	r2, [r3, #24]
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e267      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d075      	beq.n	80010e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ffa:	4b88      	ldr	r3, [pc, #544]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	2b04      	cmp	r3, #4
 8001004:	d00c      	beq.n	8001020 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001006:	4b85      	ldr	r3, [pc, #532]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800100e:	2b08      	cmp	r3, #8
 8001010:	d112      	bne.n	8001038 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001012:	4b82      	ldr	r3, [pc, #520]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800101a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800101e:	d10b      	bne.n	8001038 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001020:	4b7e      	ldr	r3, [pc, #504]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d05b      	beq.n	80010e4 <HAL_RCC_OscConfig+0x108>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d157      	bne.n	80010e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e242      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001040:	d106      	bne.n	8001050 <HAL_RCC_OscConfig+0x74>
 8001042:	4b76      	ldr	r3, [pc, #472]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a75      	ldr	r2, [pc, #468]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	e01d      	b.n	800108c <HAL_RCC_OscConfig+0xb0>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001058:	d10c      	bne.n	8001074 <HAL_RCC_OscConfig+0x98>
 800105a:	4b70      	ldr	r3, [pc, #448]	; (800121c <HAL_RCC_OscConfig+0x240>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a6f      	ldr	r2, [pc, #444]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	4b6d      	ldr	r3, [pc, #436]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a6c      	ldr	r2, [pc, #432]	; (800121c <HAL_RCC_OscConfig+0x240>)
 800106c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e00b      	b.n	800108c <HAL_RCC_OscConfig+0xb0>
 8001074:	4b69      	ldr	r3, [pc, #420]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a68      	ldr	r2, [pc, #416]	; (800121c <HAL_RCC_OscConfig+0x240>)
 800107a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b66      	ldr	r3, [pc, #408]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a65      	ldr	r2, [pc, #404]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d013      	beq.n	80010bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff fce4 	bl	8000a60 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800109c:	f7ff fce0 	bl	8000a60 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b64      	cmp	r3, #100	; 0x64
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e207      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	4b5b      	ldr	r3, [pc, #364]	; (800121c <HAL_RCC_OscConfig+0x240>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0xc0>
 80010ba:	e014      	b.n	80010e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fcd0 	bl	8000a60 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c4:	f7ff fccc 	bl	8000a60 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b64      	cmp	r3, #100	; 0x64
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e1f3      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d6:	4b51      	ldr	r3, [pc, #324]	; (800121c <HAL_RCC_OscConfig+0x240>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f0      	bne.n	80010c4 <HAL_RCC_OscConfig+0xe8>
 80010e2:	e000      	b.n	80010e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d063      	beq.n	80011ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010f2:	4b4a      	ldr	r3, [pc, #296]	; (800121c <HAL_RCC_OscConfig+0x240>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 030c 	and.w	r3, r3, #12
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00b      	beq.n	8001116 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010fe:	4b47      	ldr	r3, [pc, #284]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001106:	2b08      	cmp	r3, #8
 8001108:	d11c      	bne.n	8001144 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800110a:	4b44      	ldr	r3, [pc, #272]	; (800121c <HAL_RCC_OscConfig+0x240>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d116      	bne.n	8001144 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001116:	4b41      	ldr	r3, [pc, #260]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d005      	beq.n	800112e <HAL_RCC_OscConfig+0x152>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d001      	beq.n	800112e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e1c7      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112e:	4b3b      	ldr	r3, [pc, #236]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	4937      	ldr	r1, [pc, #220]	; (800121c <HAL_RCC_OscConfig+0x240>)
 800113e:	4313      	orrs	r3, r2
 8001140:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001142:	e03a      	b.n	80011ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d020      	beq.n	800118e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800114c:	4b34      	ldr	r3, [pc, #208]	; (8001220 <HAL_RCC_OscConfig+0x244>)
 800114e:	2201      	movs	r2, #1
 8001150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001152:	f7ff fc85 	bl	8000a60 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800115a:	f7ff fc81 	bl	8000a60 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e1a8      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116c:	4b2b      	ldr	r3, [pc, #172]	; (800121c <HAL_RCC_OscConfig+0x240>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0f0      	beq.n	800115a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001178:	4b28      	ldr	r3, [pc, #160]	; (800121c <HAL_RCC_OscConfig+0x240>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	4925      	ldr	r1, [pc, #148]	; (800121c <HAL_RCC_OscConfig+0x240>)
 8001188:	4313      	orrs	r3, r2
 800118a:	600b      	str	r3, [r1, #0]
 800118c:	e015      	b.n	80011ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <HAL_RCC_OscConfig+0x244>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001194:	f7ff fc64 	bl	8000a60 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119c:	f7ff fc60 	bl	8000a60 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e187      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ae:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HAL_RCC_OscConfig+0x240>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d036      	beq.n	8001234 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d016      	beq.n	80011fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_RCC_OscConfig+0x248>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d4:	f7ff fc44 	bl	8000a60 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011dc:	f7ff fc40 	bl	8000a60 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e167      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_RCC_OscConfig+0x240>)
 80011f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0f0      	beq.n	80011dc <HAL_RCC_OscConfig+0x200>
 80011fa:	e01b      	b.n	8001234 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_RCC_OscConfig+0x248>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001202:	f7ff fc2d 	bl	8000a60 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001208:	e00e      	b.n	8001228 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800120a:	f7ff fc29 	bl	8000a60 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d907      	bls.n	8001228 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e150      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
 800121c:	40023800 	.word	0x40023800
 8001220:	42470000 	.word	0x42470000
 8001224:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001228:	4b88      	ldr	r3, [pc, #544]	; (800144c <HAL_RCC_OscConfig+0x470>)
 800122a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1ea      	bne.n	800120a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 8097 	beq.w	8001370 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001246:	4b81      	ldr	r3, [pc, #516]	; (800144c <HAL_RCC_OscConfig+0x470>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10f      	bne.n	8001272 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	4b7d      	ldr	r3, [pc, #500]	; (800144c <HAL_RCC_OscConfig+0x470>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	4a7c      	ldr	r2, [pc, #496]	; (800144c <HAL_RCC_OscConfig+0x470>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
 8001262:	4b7a      	ldr	r3, [pc, #488]	; (800144c <HAL_RCC_OscConfig+0x470>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800126e:	2301      	movs	r3, #1
 8001270:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001272:	4b77      	ldr	r3, [pc, #476]	; (8001450 <HAL_RCC_OscConfig+0x474>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127a:	2b00      	cmp	r3, #0
 800127c:	d118      	bne.n	80012b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800127e:	4b74      	ldr	r3, [pc, #464]	; (8001450 <HAL_RCC_OscConfig+0x474>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a73      	ldr	r2, [pc, #460]	; (8001450 <HAL_RCC_OscConfig+0x474>)
 8001284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800128a:	f7ff fbe9 	bl	8000a60 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001292:	f7ff fbe5 	bl	8000a60 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e10c      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a4:	4b6a      	ldr	r3, [pc, #424]	; (8001450 <HAL_RCC_OscConfig+0x474>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f0      	beq.n	8001292 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d106      	bne.n	80012c6 <HAL_RCC_OscConfig+0x2ea>
 80012b8:	4b64      	ldr	r3, [pc, #400]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012bc:	4a63      	ldr	r2, [pc, #396]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6713      	str	r3, [r2, #112]	; 0x70
 80012c4:	e01c      	b.n	8001300 <HAL_RCC_OscConfig+0x324>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b05      	cmp	r3, #5
 80012cc:	d10c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x30c>
 80012ce:	4b5f      	ldr	r3, [pc, #380]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d2:	4a5e      	ldr	r2, [pc, #376]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6713      	str	r3, [r2, #112]	; 0x70
 80012da:	4b5c      	ldr	r3, [pc, #368]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012de:	4a5b      	ldr	r2, [pc, #364]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6713      	str	r3, [r2, #112]	; 0x70
 80012e6:	e00b      	b.n	8001300 <HAL_RCC_OscConfig+0x324>
 80012e8:	4b58      	ldr	r3, [pc, #352]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ec:	4a57      	ldr	r2, [pc, #348]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012ee:	f023 0301 	bic.w	r3, r3, #1
 80012f2:	6713      	str	r3, [r2, #112]	; 0x70
 80012f4:	4b55      	ldr	r3, [pc, #340]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f8:	4a54      	ldr	r2, [pc, #336]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80012fa:	f023 0304 	bic.w	r3, r3, #4
 80012fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d015      	beq.n	8001334 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001308:	f7ff fbaa 	bl	8000a60 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130e:	e00a      	b.n	8001326 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001310:	f7ff fba6 	bl	8000a60 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	f241 3288 	movw	r2, #5000	; 0x1388
 800131e:	4293      	cmp	r3, r2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e0cb      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001326:	4b49      	ldr	r3, [pc, #292]	; (800144c <HAL_RCC_OscConfig+0x470>)
 8001328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0ee      	beq.n	8001310 <HAL_RCC_OscConfig+0x334>
 8001332:	e014      	b.n	800135e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001334:	f7ff fb94 	bl	8000a60 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800133a:	e00a      	b.n	8001352 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800133c:	f7ff fb90 	bl	8000a60 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	f241 3288 	movw	r2, #5000	; 0x1388
 800134a:	4293      	cmp	r3, r2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e0b5      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001352:	4b3e      	ldr	r3, [pc, #248]	; (800144c <HAL_RCC_OscConfig+0x470>)
 8001354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1ee      	bne.n	800133c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800135e:	7dfb      	ldrb	r3, [r7, #23]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d105      	bne.n	8001370 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001364:	4b39      	ldr	r3, [pc, #228]	; (800144c <HAL_RCC_OscConfig+0x470>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	4a38      	ldr	r2, [pc, #224]	; (800144c <HAL_RCC_OscConfig+0x470>)
 800136a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800136e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80a1 	beq.w	80014bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <HAL_RCC_OscConfig+0x470>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b08      	cmp	r3, #8
 8001384:	d05c      	beq.n	8001440 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d141      	bne.n	8001412 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138e:	4b31      	ldr	r3, [pc, #196]	; (8001454 <HAL_RCC_OscConfig+0x478>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff fb64 	bl	8000a60 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800139c:	f7ff fb60 	bl	8000a60 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e087      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ae:	4b27      	ldr	r3, [pc, #156]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69da      	ldr	r2, [r3, #28]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	019b      	lsls	r3, r3, #6
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	3b01      	subs	r3, #1
 80013d4:	041b      	lsls	r3, r3, #16
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013dc:	061b      	lsls	r3, r3, #24
 80013de:	491b      	ldr	r1, [pc, #108]	; (800144c <HAL_RCC_OscConfig+0x470>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_RCC_OscConfig+0x478>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ea:	f7ff fb39 	bl	8000a60 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f2:	f7ff fb35 	bl	8000a60 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e05c      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_RCC_OscConfig+0x470>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x416>
 8001410:	e054      	b.n	80014bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_RCC_OscConfig+0x478>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fb22 	bl	8000a60 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001420:	f7ff fb1e 	bl	8000a60 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e045      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_RCC_OscConfig+0x470>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x444>
 800143e:	e03d      	b.n	80014bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d107      	bne.n	8001458 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e038      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
 800144c:	40023800 	.word	0x40023800
 8001450:	40007000 	.word	0x40007000
 8001454:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_RCC_OscConfig+0x4ec>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d028      	beq.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001470:	429a      	cmp	r2, r3
 8001472:	d121      	bne.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147e:	429a      	cmp	r2, r3
 8001480:	d11a      	bne.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001488:	4013      	ands	r3, r2
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800148e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001490:	4293      	cmp	r3, r2
 8001492:	d111      	bne.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	085b      	lsrs	r3, r3, #1
 80014a0:	3b01      	subs	r3, #1
 80014a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d107      	bne.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d001      	beq.n	80014bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800

080014cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0cc      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014e0:	4b68      	ldr	r3, [pc, #416]	; (8001684 <HAL_RCC_ClockConfig+0x1b8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d90c      	bls.n	8001508 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ee:	4b65      	ldr	r3, [pc, #404]	; (8001684 <HAL_RCC_ClockConfig+0x1b8>)
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f6:	4b63      	ldr	r3, [pc, #396]	; (8001684 <HAL_RCC_ClockConfig+0x1b8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	d001      	beq.n	8001508 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e0b8      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d020      	beq.n	8001556 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001520:	4b59      	ldr	r3, [pc, #356]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	4a58      	ldr	r2, [pc, #352]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800152a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001538:	4b53      	ldr	r3, [pc, #332]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	4a52      	ldr	r2, [pc, #328]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001542:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001544:	4b50      	ldr	r3, [pc, #320]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	494d      	ldr	r1, [pc, #308]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	4313      	orrs	r3, r2
 8001554:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d044      	beq.n	80015ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d107      	bne.n	800157a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156a:	4b47      	ldr	r3, [pc, #284]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d119      	bne.n	80015aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e07f      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d003      	beq.n	800158a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001586:	2b03      	cmp	r3, #3
 8001588:	d107      	bne.n	800159a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158a:	4b3f      	ldr	r3, [pc, #252]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d109      	bne.n	80015aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e06f      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159a:	4b3b      	ldr	r3, [pc, #236]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e067      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015aa:	4b37      	ldr	r3, [pc, #220]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f023 0203 	bic.w	r2, r3, #3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	4934      	ldr	r1, [pc, #208]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015bc:	f7ff fa50 	bl	8000a60 <HAL_GetTick>
 80015c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c2:	e00a      	b.n	80015da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c4:	f7ff fa4c 	bl	8000a60 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e04f      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015da:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 020c 	and.w	r2, r3, #12
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d1eb      	bne.n	80015c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015ec:	4b25      	ldr	r3, [pc, #148]	; (8001684 <HAL_RCC_ClockConfig+0x1b8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d20c      	bcs.n	8001614 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b22      	ldr	r3, [pc, #136]	; (8001684 <HAL_RCC_ClockConfig+0x1b8>)
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d001      	beq.n	8001614 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e032      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d008      	beq.n	8001632 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	4916      	ldr	r1, [pc, #88]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	4313      	orrs	r3, r2
 8001630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	2b00      	cmp	r3, #0
 800163c:	d009      	beq.n	8001652 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	490e      	ldr	r1, [pc, #56]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	4313      	orrs	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001652:	f000 f821 	bl	8001698 <HAL_RCC_GetSysClockFreq>
 8001656:	4602      	mov	r2, r0
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	490a      	ldr	r1, [pc, #40]	; (800168c <HAL_RCC_ClockConfig+0x1c0>)
 8001664:	5ccb      	ldrb	r3, [r1, r3]
 8001666:	fa22 f303 	lsr.w	r3, r2, r3
 800166a:	4a09      	ldr	r2, [pc, #36]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_RCC_ClockConfig+0x1c8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff f8e6 	bl	8000844 <HAL_InitTick>

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023c00 	.word	0x40023c00
 8001688:	40023800 	.word	0x40023800
 800168c:	08006114 	.word	0x08006114
 8001690:	20000000 	.word	0x20000000
 8001694:	20000004 	.word	0x20000004

08001698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800169c:	b090      	sub	sp, #64	; 0x40
 800169e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
 80016a4:	2300      	movs	r3, #0
 80016a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016a8:	2300      	movs	r3, #0
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016b0:	4b59      	ldr	r3, [pc, #356]	; (8001818 <HAL_RCC_GetSysClockFreq+0x180>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d00d      	beq.n	80016d8 <HAL_RCC_GetSysClockFreq+0x40>
 80016bc:	2b08      	cmp	r3, #8
 80016be:	f200 80a1 	bhi.w	8001804 <HAL_RCC_GetSysClockFreq+0x16c>
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <HAL_RCC_GetSysClockFreq+0x34>
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d003      	beq.n	80016d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80016ca:	e09b      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016cc:	4b53      	ldr	r3, [pc, #332]	; (800181c <HAL_RCC_GetSysClockFreq+0x184>)
 80016ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80016d0:	e09b      	b.n	800180a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016d2:	4b53      	ldr	r3, [pc, #332]	; (8001820 <HAL_RCC_GetSysClockFreq+0x188>)
 80016d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016d6:	e098      	b.n	800180a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016d8:	4b4f      	ldr	r3, [pc, #316]	; (8001818 <HAL_RCC_GetSysClockFreq+0x180>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016e2:	4b4d      	ldr	r3, [pc, #308]	; (8001818 <HAL_RCC_GetSysClockFreq+0x180>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d028      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ee:	4b4a      	ldr	r3, [pc, #296]	; (8001818 <HAL_RCC_GetSysClockFreq+0x180>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	099b      	lsrs	r3, r3, #6
 80016f4:	2200      	movs	r2, #0
 80016f6:	623b      	str	r3, [r7, #32]
 80016f8:	627a      	str	r2, [r7, #36]	; 0x24
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001700:	2100      	movs	r1, #0
 8001702:	4b47      	ldr	r3, [pc, #284]	; (8001820 <HAL_RCC_GetSysClockFreq+0x188>)
 8001704:	fb03 f201 	mul.w	r2, r3, r1
 8001708:	2300      	movs	r3, #0
 800170a:	fb00 f303 	mul.w	r3, r0, r3
 800170e:	4413      	add	r3, r2
 8001710:	4a43      	ldr	r2, [pc, #268]	; (8001820 <HAL_RCC_GetSysClockFreq+0x188>)
 8001712:	fba0 1202 	umull	r1, r2, r0, r2
 8001716:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001718:	460a      	mov	r2, r1
 800171a:	62ba      	str	r2, [r7, #40]	; 0x28
 800171c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800171e:	4413      	add	r3, r2
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001724:	2200      	movs	r2, #0
 8001726:	61bb      	str	r3, [r7, #24]
 8001728:	61fa      	str	r2, [r7, #28]
 800172a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800172e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001732:	f7fe fd97 	bl	8000264 <__aeabi_uldivmod>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4613      	mov	r3, r2
 800173c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800173e:	e053      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001740:	4b35      	ldr	r3, [pc, #212]	; (8001818 <HAL_RCC_GetSysClockFreq+0x180>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	099b      	lsrs	r3, r3, #6
 8001746:	2200      	movs	r2, #0
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	617a      	str	r2, [r7, #20]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001752:	f04f 0b00 	mov.w	fp, #0
 8001756:	4652      	mov	r2, sl
 8001758:	465b      	mov	r3, fp
 800175a:	f04f 0000 	mov.w	r0, #0
 800175e:	f04f 0100 	mov.w	r1, #0
 8001762:	0159      	lsls	r1, r3, #5
 8001764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001768:	0150      	lsls	r0, r2, #5
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	ebb2 080a 	subs.w	r8, r2, sl
 8001772:	eb63 090b 	sbc.w	r9, r3, fp
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001782:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001786:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800178a:	ebb2 0408 	subs.w	r4, r2, r8
 800178e:	eb63 0509 	sbc.w	r5, r3, r9
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	00eb      	lsls	r3, r5, #3
 800179c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017a0:	00e2      	lsls	r2, r4, #3
 80017a2:	4614      	mov	r4, r2
 80017a4:	461d      	mov	r5, r3
 80017a6:	eb14 030a 	adds.w	r3, r4, sl
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	eb45 030b 	adc.w	r3, r5, fp
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017be:	4629      	mov	r1, r5
 80017c0:	028b      	lsls	r3, r1, #10
 80017c2:	4621      	mov	r1, r4
 80017c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017c8:	4621      	mov	r1, r4
 80017ca:	028a      	lsls	r2, r1, #10
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d2:	2200      	movs	r2, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	60fa      	str	r2, [r7, #12]
 80017d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017dc:	f7fe fd42 	bl	8000264 <__aeabi_uldivmod>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4613      	mov	r3, r2
 80017e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	0c1b      	lsrs	r3, r3, #16
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	3301      	adds	r3, #1
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80017f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001800:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001802:	e002      	b.n	800180a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_RCC_GetSysClockFreq+0x184>)
 8001806:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800180a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800180c:	4618      	mov	r0, r3
 800180e:	3740      	adds	r7, #64	; 0x40
 8001810:	46bd      	mov	sp, r7
 8001812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800
 800181c:	00f42400 	.word	0x00f42400
 8001820:	017d7840 	.word	0x017d7840

08001824 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <HAL_RCC_GetHCLKFreq+0x14>)
 800182a:	681b      	ldr	r3, [r3, #0]
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000000 	.word	0x20000000

0800183c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001840:	f7ff fff0 	bl	8001824 <HAL_RCC_GetHCLKFreq>
 8001844:	4602      	mov	r2, r0
 8001846:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	0a9b      	lsrs	r3, r3, #10
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	4903      	ldr	r1, [pc, #12]	; (8001860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001852:	5ccb      	ldrb	r3, [r1, r3]
 8001854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001858:	4618      	mov	r0, r3
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40023800 	.word	0x40023800
 8001860:	08006124 	.word	0x08006124

08001864 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	220f      	movs	r2, #15
 8001872:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_RCC_GetClockConfig+0x5c>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0203 	and.w	r2, r3, #3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <HAL_RCC_GetClockConfig+0x5c>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <HAL_RCC_GetClockConfig+0x5c>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_RCC_GetClockConfig+0x5c>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	08db      	lsrs	r3, r3, #3
 800189e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <HAL_RCC_GetClockConfig+0x60>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0207 	and.w	r2, r3, #7
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	601a      	str	r2, [r3, #0]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40023c00 	.word	0x40023c00

080018c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e041      	b.n	800195e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d106      	bne.n	80018f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f839 	bl	8001966 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2202      	movs	r2, #2
 80018f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3304      	adds	r3, #4
 8001904:	4619      	mov	r1, r3
 8001906:	4610      	mov	r0, r2
 8001908:	f000 f9d8 	bl	8001cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b01      	cmp	r3, #1
 800198e:	d001      	beq.n	8001994 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e04e      	b.n	8001a32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2202      	movs	r2, #2
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0201 	orr.w	r2, r2, #1
 80019aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a23      	ldr	r2, [pc, #140]	; (8001a40 <HAL_TIM_Base_Start_IT+0xc4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d022      	beq.n	80019fc <HAL_TIM_Base_Start_IT+0x80>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019be:	d01d      	beq.n	80019fc <HAL_TIM_Base_Start_IT+0x80>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a1f      	ldr	r2, [pc, #124]	; (8001a44 <HAL_TIM_Base_Start_IT+0xc8>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d018      	beq.n	80019fc <HAL_TIM_Base_Start_IT+0x80>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a1e      	ldr	r2, [pc, #120]	; (8001a48 <HAL_TIM_Base_Start_IT+0xcc>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d013      	beq.n	80019fc <HAL_TIM_Base_Start_IT+0x80>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <HAL_TIM_Base_Start_IT+0xd0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00e      	beq.n	80019fc <HAL_TIM_Base_Start_IT+0x80>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <HAL_TIM_Base_Start_IT+0xd4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d009      	beq.n	80019fc <HAL_TIM_Base_Start_IT+0x80>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a19      	ldr	r2, [pc, #100]	; (8001a54 <HAL_TIM_Base_Start_IT+0xd8>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d004      	beq.n	80019fc <HAL_TIM_Base_Start_IT+0x80>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a18      	ldr	r2, [pc, #96]	; (8001a58 <HAL_TIM_Base_Start_IT+0xdc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d111      	bne.n	8001a20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d010      	beq.n	8001a30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0201 	orr.w	r2, r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a1e:	e007      	b.n	8001a30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40010000 	.word	0x40010000
 8001a44:	40000400 	.word	0x40000400
 8001a48:	40000800 	.word	0x40000800
 8001a4c:	40000c00 	.word	0x40000c00
 8001a50:	40010400 	.word	0x40010400
 8001a54:	40014000 	.word	0x40014000
 8001a58:	40001800 	.word	0x40001800

08001a5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d122      	bne.n	8001ab8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d11b      	bne.n	8001ab8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f06f 0202 	mvn.w	r2, #2
 8001a88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f8ee 	bl	8001c80 <HAL_TIM_IC_CaptureCallback>
 8001aa4:	e005      	b.n	8001ab2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f8e0 	bl	8001c6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f8f1 	bl	8001c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d122      	bne.n	8001b0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d11b      	bne.n	8001b0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f06f 0204 	mvn.w	r2, #4
 8001adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f8c4 	bl	8001c80 <HAL_TIM_IC_CaptureCallback>
 8001af8:	e005      	b.n	8001b06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f8b6 	bl	8001c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f8c7 	bl	8001c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d122      	bne.n	8001b60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d11b      	bne.n	8001b60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f06f 0208 	mvn.w	r2, #8
 8001b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2204      	movs	r2, #4
 8001b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f89a 	bl	8001c80 <HAL_TIM_IC_CaptureCallback>
 8001b4c:	e005      	b.n	8001b5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f88c 	bl	8001c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f89d 	bl	8001c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	2b10      	cmp	r3, #16
 8001b6c:	d122      	bne.n	8001bb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	2b10      	cmp	r3, #16
 8001b7a:	d11b      	bne.n	8001bb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f06f 0210 	mvn.w	r2, #16
 8001b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2208      	movs	r2, #8
 8001b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f870 	bl	8001c80 <HAL_TIM_IC_CaptureCallback>
 8001ba0:	e005      	b.n	8001bae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f862 	bl	8001c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f873 	bl	8001c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d10e      	bne.n	8001be0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d107      	bne.n	8001be0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f06f 0201 	mvn.w	r2, #1
 8001bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7fe fdf2 	bl	80007c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bea:	2b80      	cmp	r3, #128	; 0x80
 8001bec:	d10e      	bne.n	8001c0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf8:	2b80      	cmp	r3, #128	; 0x80
 8001bfa:	d107      	bne.n	8001c0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f902 	bl	8001e10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c16:	2b40      	cmp	r3, #64	; 0x40
 8001c18:	d10e      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c24:	2b40      	cmp	r3, #64	; 0x40
 8001c26:	d107      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f838 	bl	8001ca8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0320 	and.w	r3, r3, #32
 8001c42:	2b20      	cmp	r3, #32
 8001c44:	d10e      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0320 	and.w	r3, r3, #32
 8001c50:	2b20      	cmp	r3, #32
 8001c52:	d107      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0220 	mvn.w	r2, #32
 8001c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f8cc 	bl	8001dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a40      	ldr	r2, [pc, #256]	; (8001dd0 <TIM_Base_SetConfig+0x114>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d013      	beq.n	8001cfc <TIM_Base_SetConfig+0x40>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cda:	d00f      	beq.n	8001cfc <TIM_Base_SetConfig+0x40>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a3d      	ldr	r2, [pc, #244]	; (8001dd4 <TIM_Base_SetConfig+0x118>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d00b      	beq.n	8001cfc <TIM_Base_SetConfig+0x40>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a3c      	ldr	r2, [pc, #240]	; (8001dd8 <TIM_Base_SetConfig+0x11c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d007      	beq.n	8001cfc <TIM_Base_SetConfig+0x40>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a3b      	ldr	r2, [pc, #236]	; (8001ddc <TIM_Base_SetConfig+0x120>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d003      	beq.n	8001cfc <TIM_Base_SetConfig+0x40>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a3a      	ldr	r2, [pc, #232]	; (8001de0 <TIM_Base_SetConfig+0x124>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d108      	bne.n	8001d0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a2f      	ldr	r2, [pc, #188]	; (8001dd0 <TIM_Base_SetConfig+0x114>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d02b      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1c:	d027      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a2c      	ldr	r2, [pc, #176]	; (8001dd4 <TIM_Base_SetConfig+0x118>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d023      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a2b      	ldr	r2, [pc, #172]	; (8001dd8 <TIM_Base_SetConfig+0x11c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d01f      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a2a      	ldr	r2, [pc, #168]	; (8001ddc <TIM_Base_SetConfig+0x120>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01b      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a29      	ldr	r2, [pc, #164]	; (8001de0 <TIM_Base_SetConfig+0x124>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d017      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a28      	ldr	r2, [pc, #160]	; (8001de4 <TIM_Base_SetConfig+0x128>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d013      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a27      	ldr	r2, [pc, #156]	; (8001de8 <TIM_Base_SetConfig+0x12c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00f      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a26      	ldr	r2, [pc, #152]	; (8001dec <TIM_Base_SetConfig+0x130>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00b      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a25      	ldr	r2, [pc, #148]	; (8001df0 <TIM_Base_SetConfig+0x134>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d007      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a24      	ldr	r2, [pc, #144]	; (8001df4 <TIM_Base_SetConfig+0x138>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d003      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <TIM_Base_SetConfig+0x13c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d108      	bne.n	8001d80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <TIM_Base_SetConfig+0x114>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d003      	beq.n	8001db4 <TIM_Base_SetConfig+0xf8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a0c      	ldr	r2, [pc, #48]	; (8001de0 <TIM_Base_SetConfig+0x124>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d103      	bne.n	8001dbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	615a      	str	r2, [r3, #20]
}
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	40000400 	.word	0x40000400
 8001dd8:	40000800 	.word	0x40000800
 8001ddc:	40000c00 	.word	0x40000c00
 8001de0:	40010400 	.word	0x40010400
 8001de4:	40014000 	.word	0x40014000
 8001de8:	40014400 	.word	0x40014400
 8001dec:	40014800 	.word	0x40014800
 8001df0:	40001800 	.word	0x40001800
 8001df4:	40001c00 	.word	0x40001c00
 8001df8:	40002000 	.word	0x40002000

08001dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f103 0208 	add.w	r2, r3, #8
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e3c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f103 0208 	add.w	r2, r3, #8
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f103 0208 	add.w	r2, r3, #8
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e94:	d103      	bne.n	8001e9e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	e00c      	b.n	8001eb8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3308      	adds	r3, #8
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	e002      	b.n	8001eac <vListInsert+0x2e>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d2f6      	bcs.n	8001ea6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	601a      	str	r2, [r3, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6892      	ldr	r2, [r2, #8]
 8001f06:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6852      	ldr	r2, [r2, #4]
 8001f10:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d103      	bne.n	8001f24 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	1e5a      	subs	r2, r3, #1
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10a      	bne.n	8001f72 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f60:	f383 8811 	msr	BASEPRI, r3
 8001f64:	f3bf 8f6f 	isb	sy
 8001f68:	f3bf 8f4f 	dsb	sy
 8001f6c:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001f6e:	bf00      	nop
 8001f70:	e7fe      	b.n	8001f70 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d05d      	beq.n	8002034 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d059      	beq.n	8002034 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f88:	2100      	movs	r1, #0
 8001f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d000      	beq.n	8001f94 <xQueueGenericReset+0x50>
 8001f92:	2101      	movs	r1, #1
 8001f94:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d14c      	bne.n	8002034 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001f9a:	f001 ff3b 	bl	8003e14 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa6:	6939      	ldr	r1, [r7, #16]
 8001fa8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001faa:	fb01 f303 	mul.w	r3, r1, r3
 8001fae:	441a      	add	r2, r3
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	6939      	ldr	r1, [r7, #16]
 8001fce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fd0:	fb01 f303 	mul.w	r3, r1, r3
 8001fd4:	441a      	add	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	22ff      	movs	r2, #255	; 0xff
 8001fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	22ff      	movs	r2, #255	; 0xff
 8001fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d114      	bne.n	800201a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01a      	beq.n	800202e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	3310      	adds	r3, #16
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f001 f813 	bl	8003028 <xTaskRemoveFromEventList>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d012      	beq.n	800202e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002008:	4b15      	ldr	r3, [pc, #84]	; (8002060 <xQueueGenericReset+0x11c>)
 800200a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	f3bf 8f4f 	dsb	sy
 8002014:	f3bf 8f6f 	isb	sy
 8002018:	e009      	b.n	800202e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	3310      	adds	r3, #16
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff ff00 	bl	8001e24 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	3324      	adds	r3, #36	; 0x24
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fefb 	bl	8001e24 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800202e:	f001 ff21 	bl	8003e74 <vPortExitCritical>
 8002032:	e001      	b.n	8002038 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10a      	bne.n	8002054 <xQueueGenericReset+0x110>
        __asm volatile
 800203e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002042:	f383 8811 	msr	BASEPRI, r3
 8002046:	f3bf 8f6f 	isb	sy
 800204a:	f3bf 8f4f 	dsb	sy
 800204e:	60bb      	str	r3, [r7, #8]
    }
 8002050:	bf00      	nop
 8002052:	e7fe      	b.n	8002052 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002054:	697b      	ldr	r3, [r7, #20]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	e000ed04 	.word	0xe000ed04

08002064 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af02      	add	r7, sp, #8
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	4613      	mov	r3, r2
 8002070:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d02e      	beq.n	80020da <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800207c:	2100      	movs	r1, #0
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	fba3 2302 	umull	r2, r3, r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d000      	beq.n	800208c <xQueueGenericCreate+0x28>
 800208a:	2101      	movs	r1, #1
 800208c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800208e:	2b00      	cmp	r3, #0
 8002090:	d123      	bne.n	80020da <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800209a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800209e:	d81c      	bhi.n	80020da <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	fb02 f303 	mul.w	r3, r2, r3
 80020a8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	3350      	adds	r3, #80	; 0x50
 80020ae:	4618      	mov	r0, r3
 80020b0:	f001 ffdc 	bl	800406c <pvPortMalloc>
 80020b4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01c      	beq.n	80020f6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3350      	adds	r3, #80	; 0x50
 80020c4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80020c6:	79fa      	ldrb	r2, [r7, #7]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f814 	bl	8002100 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80020d8:	e00d      	b.n	80020f6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10a      	bne.n	80020f6 <xQueueGenericCreate+0x92>
        __asm volatile
 80020e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e4:	f383 8811 	msr	BASEPRI, r3
 80020e8:	f3bf 8f6f 	isb	sy
 80020ec:	f3bf 8f4f 	dsb	sy
 80020f0:	613b      	str	r3, [r7, #16]
    }
 80020f2:	bf00      	nop
 80020f4:	e7fe      	b.n	80020f4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80020f6:	69fb      	ldr	r3, [r7, #28]
    }
 80020f8:	4618      	mov	r0, r3
 80020fa:	3720      	adds	r7, #32
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d103      	bne.n	800211c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e002      	b.n	8002122 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800212e:	2101      	movs	r1, #1
 8002130:	69b8      	ldr	r0, [r7, #24]
 8002132:	f7ff ff07 	bl	8001f44 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	68f9      	ldr	r1, [r7, #12]
 8002144:	2073      	movs	r0, #115	; 0x73
 8002146:	f002 ffdf 	bl	8005108 <SEGGER_SYSVIEW_RecordU32x3>
}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b08f      	sub	sp, #60	; 0x3c
 8002158:	af02      	add	r7, sp, #8
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002160:	2300      	movs	r3, #0
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10a      	bne.n	8002184 <xQueueReceive+0x30>
        __asm volatile
 800216e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002172:	f383 8811 	msr	BASEPRI, r3
 8002176:	f3bf 8f6f 	isb	sy
 800217a:	f3bf 8f4f 	dsb	sy
 800217e:	623b      	str	r3, [r7, #32]
    }
 8002180:	bf00      	nop
 8002182:	e7fe      	b.n	8002182 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d103      	bne.n	8002192 <xQueueReceive+0x3e>
 800218a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <xQueueReceive+0x42>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <xQueueReceive+0x44>
 8002196:	2300      	movs	r3, #0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10a      	bne.n	80021b2 <xQueueReceive+0x5e>
        __asm volatile
 800219c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a0:	f383 8811 	msr	BASEPRI, r3
 80021a4:	f3bf 8f6f 	isb	sy
 80021a8:	f3bf 8f4f 	dsb	sy
 80021ac:	61fb      	str	r3, [r7, #28]
    }
 80021ae:	bf00      	nop
 80021b0:	e7fe      	b.n	80021b0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021b2:	f001 f94b 	bl	800344c <xTaskGetSchedulerState>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <xQueueReceive+0x6e>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <xQueueReceive+0x72>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <xQueueReceive+0x74>
 80021c6:	2300      	movs	r3, #0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10a      	bne.n	80021e2 <xQueueReceive+0x8e>
        __asm volatile
 80021cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d0:	f383 8811 	msr	BASEPRI, r3
 80021d4:	f3bf 8f6f 	isb	sy
 80021d8:	f3bf 8f4f 	dsb	sy
 80021dc:	61bb      	str	r3, [r7, #24]
    }
 80021de:	bf00      	nop
 80021e0:	e7fe      	b.n	80021e0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80021e2:	f001 fe17 	bl	8003e14 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d02f      	beq.n	8002252 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80021f2:	68b9      	ldr	r1, [r7, #8]
 80021f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021f6:	f000 f8bd 	bl	8002374 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80021fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 fd11 	bl	8005c24 <SEGGER_SYSVIEW_ShrinkId>
 8002202:	4604      	mov	r4, r0
 8002204:	2000      	movs	r0, #0
 8002206:	f003 fd0d 	bl	8005c24 <SEGGER_SYSVIEW_ShrinkId>
 800220a:	4602      	mov	r2, r0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2101      	movs	r1, #1
 8002210:	9100      	str	r1, [sp, #0]
 8002212:	4621      	mov	r1, r4
 8002214:	205c      	movs	r0, #92	; 0x5c
 8002216:	f002 ffed 	bl	80051f4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	1e5a      	subs	r2, r3, #1
 800221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002220:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00f      	beq.n	800224a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222c:	3310      	adds	r3, #16
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fefa 	bl	8003028 <xTaskRemoveFromEventList>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800223a:	4b4d      	ldr	r3, [pc, #308]	; (8002370 <xQueueReceive+0x21c>)
 800223c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	f3bf 8f4f 	dsb	sy
 8002246:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800224a:	f001 fe13 	bl	8003e74 <vPortExitCritical>
                return pdPASS;
 800224e:	2301      	movs	r3, #1
 8002250:	e08a      	b.n	8002368 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d113      	bne.n	8002280 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002258:	f001 fe0c 	bl	8003e74 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225e:	4618      	mov	r0, r3
 8002260:	f003 fce0 	bl	8005c24 <SEGGER_SYSVIEW_ShrinkId>
 8002264:	4604      	mov	r4, r0
 8002266:	2000      	movs	r0, #0
 8002268:	f003 fcdc 	bl	8005c24 <SEGGER_SYSVIEW_ShrinkId>
 800226c:	4602      	mov	r2, r0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2101      	movs	r1, #1
 8002272:	9100      	str	r1, [sp, #0]
 8002274:	4621      	mov	r1, r4
 8002276:	205c      	movs	r0, #92	; 0x5c
 8002278:	f002 ffbc 	bl	80051f4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800227c:	2300      	movs	r3, #0
 800227e:	e073      	b.n	8002368 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002286:	f107 0310 	add.w	r3, r7, #16
 800228a:	4618      	mov	r0, r3
 800228c:	f000 ffa4 	bl	80031d8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002290:	2301      	movs	r3, #1
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002294:	f001 fdee 	bl	8003e74 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002298:	f000 fba6 	bl	80029e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800229c:	f001 fdba 	bl	8003e14 <vPortEnterCritical>
 80022a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022a6:	b25b      	sxtb	r3, r3
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022ac:	d103      	bne.n	80022b6 <xQueueReceive+0x162>
 80022ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022bc:	b25b      	sxtb	r3, r3
 80022be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022c2:	d103      	bne.n	80022cc <xQueueReceive+0x178>
 80022c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022cc:	f001 fdd2 	bl	8003e74 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022d0:	1d3a      	adds	r2, r7, #4
 80022d2:	f107 0310 	add.w	r3, r7, #16
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 ff93 	bl	8003204 <xTaskCheckForTimeOut>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d124      	bne.n	800232e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022e6:	f000 f8bd 	bl	8002464 <prvIsQueueEmpty>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d018      	beq.n	8002322 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80022f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f2:	3324      	adds	r3, #36	; 0x24
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fe29 	bl	8002f50 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80022fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002300:	f000 f85e 	bl	80023c0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002304:	f000 fb7e 	bl	8002a04 <xTaskResumeAll>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	f47f af69 	bne.w	80021e2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002310:	4b17      	ldr	r3, [pc, #92]	; (8002370 <xQueueReceive+0x21c>)
 8002312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	f3bf 8f4f 	dsb	sy
 800231c:	f3bf 8f6f 	isb	sy
 8002320:	e75f      	b.n	80021e2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002324:	f000 f84c 	bl	80023c0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002328:	f000 fb6c 	bl	8002a04 <xTaskResumeAll>
 800232c:	e759      	b.n	80021e2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800232e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002330:	f000 f846 	bl	80023c0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002334:	f000 fb66 	bl	8002a04 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800233a:	f000 f893 	bl	8002464 <prvIsQueueEmpty>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	f43f af4e 	beq.w	80021e2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002348:	4618      	mov	r0, r3
 800234a:	f003 fc6b 	bl	8005c24 <SEGGER_SYSVIEW_ShrinkId>
 800234e:	4604      	mov	r4, r0
 8002350:	2000      	movs	r0, #0
 8002352:	f003 fc67 	bl	8005c24 <SEGGER_SYSVIEW_ShrinkId>
 8002356:	4602      	mov	r2, r0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2101      	movs	r1, #1
 800235c:	9100      	str	r1, [sp, #0]
 800235e:	4621      	mov	r1, r4
 8002360:	205c      	movs	r0, #92	; 0x5c
 8002362:	f002 ff47 	bl	80051f4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002366:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002368:	4618      	mov	r0, r3
 800236a:	3734      	adds	r7, #52	; 0x34
 800236c:	46bd      	mov	sp, r7
 800236e:	bd90      	pop	{r4, r7, pc}
 8002370:	e000ed04 	.word	0xe000ed04

08002374 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	d018      	beq.n	80023b8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	441a      	add	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	429a      	cmp	r2, r3
 800239e:	d303      	bcc.n	80023a8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68d9      	ldr	r1, [r3, #12]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	461a      	mov	r2, r3
 80023b2:	6838      	ldr	r0, [r7, #0]
 80023b4:	f003 fe16 	bl	8005fe4 <memcpy>
    }
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80023c8:	f001 fd24 	bl	8003e14 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023d2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80023d4:	e011      	b.n	80023fa <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d012      	beq.n	8002404 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3324      	adds	r3, #36	; 0x24
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fe20 	bl	8003028 <xTaskRemoveFromEventList>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80023ee:	f000 ff6f 	bl	80032d0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80023fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	dce9      	bgt.n	80023d6 <prvUnlockQueue+0x16>
 8002402:	e000      	b.n	8002406 <prvUnlockQueue+0x46>
                    break;
 8002404:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	22ff      	movs	r2, #255	; 0xff
 800240a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800240e:	f001 fd31 	bl	8003e74 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002412:	f001 fcff 	bl	8003e14 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800241c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800241e:	e011      	b.n	8002444 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d012      	beq.n	800244e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3310      	adds	r3, #16
 800242c:	4618      	mov	r0, r3
 800242e:	f000 fdfb 	bl	8003028 <xTaskRemoveFromEventList>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002438:	f000 ff4a 	bl	80032d0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800243c:	7bbb      	ldrb	r3, [r7, #14]
 800243e:	3b01      	subs	r3, #1
 8002440:	b2db      	uxtb	r3, r3
 8002442:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002444:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002448:	2b00      	cmp	r3, #0
 800244a:	dce9      	bgt.n	8002420 <prvUnlockQueue+0x60>
 800244c:	e000      	b.n	8002450 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800244e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	22ff      	movs	r2, #255	; 0xff
 8002454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002458:	f001 fd0c 	bl	8003e74 <vPortExitCritical>
}
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800246c:	f001 fcd2 	bl	8003e14 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002478:	2301      	movs	r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	e001      	b.n	8002482 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002482:	f001 fcf7 	bl	8003e74 <vPortExitCritical>

    return xReturn;
 8002486:	68fb      	ldr	r3, [r7, #12]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10a      	bne.n	80024ba <vQueueAddToRegistry+0x2a>
        __asm volatile
 80024a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a8:	f383 8811 	msr	BASEPRI, r3
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	60fb      	str	r3, [r7, #12]
    }
 80024b6:	bf00      	nop
 80024b8:	e7fe      	b.n	80024b8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d024      	beq.n	800250a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	e01e      	b.n	8002504 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80024c6:	4a1c      	ldr	r2, [pc, #112]	; (8002538 <vQueueAddToRegistry+0xa8>)
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d105      	bne.n	80024e2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4a17      	ldr	r2, [pc, #92]	; (8002538 <vQueueAddToRegistry+0xa8>)
 80024dc:	4413      	add	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
                    break;
 80024e0:	e013      	b.n	800250a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10a      	bne.n	80024fe <vQueueAddToRegistry+0x6e>
 80024e8:	4a13      	ldr	r2, [pc, #76]	; (8002538 <vQueueAddToRegistry+0xa8>)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d104      	bne.n	80024fe <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4a0f      	ldr	r2, [pc, #60]	; (8002538 <vQueueAddToRegistry+0xa8>)
 80024fa:	4413      	add	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	3301      	adds	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2b07      	cmp	r3, #7
 8002508:	d9dd      	bls.n	80024c6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00f      	beq.n	8002530 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4618      	mov	r0, r3
 8002520:	f003 fb80 	bl	8005c24 <SEGGER_SYSVIEW_ShrinkId>
 8002524:	4601      	mov	r1, r0
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	2071      	movs	r0, #113	; 0x71
 800252c:	f002 fd92 	bl	8005054 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002530:	bf00      	nop
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	2000007c 	.word	0x2000007c

0800253c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800254c:	f001 fc62 	bl	8003e14 <vPortEnterCritical>
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002556:	b25b      	sxtb	r3, r3
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800255c:	d103      	bne.n	8002566 <vQueueWaitForMessageRestricted+0x2a>
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800256c:	b25b      	sxtb	r3, r3
 800256e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002572:	d103      	bne.n	800257c <vQueueWaitForMessageRestricted+0x40>
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800257c:	f001 fc7a 	bl	8003e74 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	2b00      	cmp	r3, #0
 8002586:	d106      	bne.n	8002596 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3324      	adds	r3, #36	; 0x24
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68b9      	ldr	r1, [r7, #8]
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fd01 	bl	8002f98 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002596:	6978      	ldr	r0, [r7, #20]
 8002598:	f7ff ff12 	bl	80023c0 <prvUnlockQueue>
    }
 800259c:	bf00      	nop
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08c      	sub	sp, #48	; 0x30
 80025a8:	af04      	add	r7, sp, #16
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	4613      	mov	r3, r2
 80025b2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f001 fd57 	bl	800406c <pvPortMalloc>
 80025be:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d013      	beq.n	80025ee <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80025c6:	2058      	movs	r0, #88	; 0x58
 80025c8:	f001 fd50 	bl	800406c <pvPortMalloc>
 80025cc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80025d4:	2258      	movs	r2, #88	; 0x58
 80025d6:	2100      	movs	r1, #0
 80025d8:	69f8      	ldr	r0, [r7, #28]
 80025da:	f003 fd11 	bl	8006000 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
 80025e4:	e005      	b.n	80025f2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80025e6:	6978      	ldr	r0, [r7, #20]
 80025e8:	f001 fdfa 	bl	80041e0 <vPortFree>
 80025ec:	e001      	b.n	80025f2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d013      	beq.n	8002620 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80025f8:	88fa      	ldrh	r2, [r7, #6]
 80025fa:	2300      	movs	r3, #0
 80025fc:	9303      	str	r3, [sp, #12]
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	9302      	str	r3, [sp, #8]
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f80e 	bl	8002630 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002614:	69f8      	ldr	r0, [r7, #28]
 8002616:	f000 f899 	bl	800274c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800261a:	2301      	movs	r3, #1
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	e002      	b.n	8002626 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002624:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002626:	69bb      	ldr	r3, [r7, #24]
    }
 8002628:	4618      	mov	r0, r3
 800262a:	3720      	adds	r7, #32
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	461a      	mov	r2, r3
 8002648:	21a5      	movs	r1, #165	; 0xa5
 800264a:	f003 fcd9 	bl	8006000 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002658:	3b01      	subs	r3, #1
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	f023 0307 	bic.w	r3, r3, #7
 8002666:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002676:	f383 8811 	msr	BASEPRI, r3
 800267a:	f3bf 8f6f 	isb	sy
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	617b      	str	r3, [r7, #20]
    }
 8002684:	bf00      	nop
 8002686:	e7fe      	b.n	8002686 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d01e      	beq.n	80026cc <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	e012      	b.n	80026ba <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	4413      	add	r3, r2
 800269a:	7819      	ldrb	r1, [r3, #0]
 800269c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	4413      	add	r3, r2
 80026a2:	3334      	adds	r3, #52	; 0x34
 80026a4:	460a      	mov	r2, r1
 80026a6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	4413      	add	r3, r2
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d006      	beq.n	80026c2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	3301      	adds	r3, #1
 80026b8:	61fb      	str	r3, [r7, #28]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	2b09      	cmp	r3, #9
 80026be:	d9e9      	bls.n	8002694 <prvInitialiseNewTask+0x64>
 80026c0:	e000      	b.n	80026c4 <prvInitialiseNewTask+0x94>
            {
                break;
 80026c2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80026c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d90a      	bls.n	80026e8 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80026d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d6:	f383 8811 	msr	BASEPRI, r3
 80026da:	f3bf 8f6f 	isb	sy
 80026de:	f3bf 8f4f 	dsb	sy
 80026e2:	613b      	str	r3, [r7, #16]
    }
 80026e4:	bf00      	nop
 80026e6:	e7fe      	b.n	80026e6 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d901      	bls.n	80026f2 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026ee:	2304      	movs	r3, #4
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80026f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026fc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002700:	3304      	adds	r3, #4
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fbae 	bl	8001e64 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270a:	3318      	adds	r3, #24
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fba9 	bl	8001e64 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002716:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271a:	f1c3 0205 	rsb	r2, r3, #5
 800271e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002720:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002726:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	68f9      	ldr	r1, [r7, #12]
 800272c:	69b8      	ldr	r0, [r7, #24]
 800272e:	f001 f9c1 	bl	8003ab4 <pxPortInitialiseStack>
 8002732:	4602      	mov	r2, r0
 8002734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002736:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273a:	2b00      	cmp	r3, #0
 800273c:	d002      	beq.n	8002744 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002742:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002744:	bf00      	nop
 8002746:	3720      	adds	r7, #32
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800274c:	b5b0      	push	{r4, r5, r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af02      	add	r7, sp, #8
 8002752:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002754:	f001 fb5e 	bl	8003e14 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002758:	4b4f      	ldr	r3, [pc, #316]	; (8002898 <prvAddNewTaskToReadyList+0x14c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	3301      	adds	r3, #1
 800275e:	4a4e      	ldr	r2, [pc, #312]	; (8002898 <prvAddNewTaskToReadyList+0x14c>)
 8002760:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002762:	4b4e      	ldr	r3, [pc, #312]	; (800289c <prvAddNewTaskToReadyList+0x150>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800276a:	4a4c      	ldr	r2, [pc, #304]	; (800289c <prvAddNewTaskToReadyList+0x150>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002770:	4b49      	ldr	r3, [pc, #292]	; (8002898 <prvAddNewTaskToReadyList+0x14c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d110      	bne.n	800279a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002778:	f000 fdce 	bl	8003318 <prvInitialiseTaskLists>
 800277c:	e00d      	b.n	800279a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800277e:	4b48      	ldr	r3, [pc, #288]	; (80028a0 <prvAddNewTaskToReadyList+0x154>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002786:	4b45      	ldr	r3, [pc, #276]	; (800289c <prvAddNewTaskToReadyList+0x150>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	429a      	cmp	r2, r3
 8002792:	d802      	bhi.n	800279a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002794:	4a41      	ldr	r2, [pc, #260]	; (800289c <prvAddNewTaskToReadyList+0x150>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800279a:	4b42      	ldr	r3, [pc, #264]	; (80028a4 <prvAddNewTaskToReadyList+0x158>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3301      	adds	r3, #1
 80027a0:	4a40      	ldr	r2, [pc, #256]	; (80028a4 <prvAddNewTaskToReadyList+0x158>)
 80027a2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80027a4:	4b3f      	ldr	r3, [pc, #252]	; (80028a4 <prvAddNewTaskToReadyList+0x158>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d016      	beq.n	80027e0 <prvAddNewTaskToReadyList+0x94>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f003 f90f 	bl	80059d8 <SEGGER_SYSVIEW_OnTaskCreate>
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	461d      	mov	r5, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461c      	mov	r4, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	1ae3      	subs	r3, r4, r3
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	462b      	mov	r3, r5
 80027dc:	f001 fec2 	bl	8004564 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f003 f97c 	bl	8005ae0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	2201      	movs	r2, #1
 80027ee:	409a      	lsls	r2, r3
 80027f0:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <prvAddNewTaskToReadyList+0x15c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	4a2c      	ldr	r2, [pc, #176]	; (80028a8 <prvAddNewTaskToReadyList+0x15c>)
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fe:	492b      	ldr	r1, [pc, #172]	; (80028ac <prvAddNewTaskToReadyList+0x160>)
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	3304      	adds	r3, #4
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	609a      	str	r2, [r3, #8]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	3204      	adds	r2, #4
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	1d1a      	adds	r2, r3, #4
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <prvAddNewTaskToReadyList+0x160>)
 800283e:	441a      	add	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	615a      	str	r2, [r3, #20]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002848:	4918      	ldr	r1, [pc, #96]	; (80028ac <prvAddNewTaskToReadyList+0x160>)
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	1c59      	adds	r1, r3, #1
 8002858:	4814      	ldr	r0, [pc, #80]	; (80028ac <prvAddNewTaskToReadyList+0x160>)
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4403      	add	r3, r0
 8002864:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002866:	f001 fb05 	bl	8003e74 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800286a:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <prvAddNewTaskToReadyList+0x154>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00e      	beq.n	8002890 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <prvAddNewTaskToReadyList+0x150>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	429a      	cmp	r2, r3
 800287e:	d207      	bcs.n	8002890 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <prvAddNewTaskToReadyList+0x164>)
 8002882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002890:	bf00      	nop
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bdb0      	pop	{r4, r5, r7, pc}
 8002898:	20000194 	.word	0x20000194
 800289c:	200000bc 	.word	0x200000bc
 80028a0:	200001a0 	.word	0x200001a0
 80028a4:	200001b0 	.word	0x200001b0
 80028a8:	2000019c 	.word	0x2000019c
 80028ac:	200000c0 	.word	0x200000c0
 80028b0:	e000ed04 	.word	0xe000ed04

080028b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d01b      	beq.n	80028fe <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <vTaskDelay+0x68>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <vTaskDelay+0x30>
        __asm volatile
 80028ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d2:	f383 8811 	msr	BASEPRI, r3
 80028d6:	f3bf 8f6f 	isb	sy
 80028da:	f3bf 8f4f 	dsb	sy
 80028de:	60bb      	str	r3, [r7, #8]
    }
 80028e0:	bf00      	nop
 80028e2:	e7fe      	b.n	80028e2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80028e4:	f000 f880 	bl	80029e8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	2023      	movs	r0, #35	; 0x23
 80028ec:	f002 fb76 	bl	8004fdc <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80028f0:	2100      	movs	r1, #0
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fdc8 	bl	8003488 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80028f8:	f000 f884 	bl	8002a04 <xTaskResumeAll>
 80028fc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d107      	bne.n	8002914 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <vTaskDelay+0x6c>)
 8002906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	f3bf 8f4f 	dsb	sy
 8002910:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	200001bc 	.word	0x200001bc
 8002920:	e000ed04 	.word	0xe000ed04

08002924 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800292a:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <vTaskStartScheduler+0xa4>)
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	2300      	movs	r3, #0
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	2300      	movs	r3, #0
 8002934:	2282      	movs	r2, #130	; 0x82
 8002936:	4925      	ldr	r1, [pc, #148]	; (80029cc <vTaskStartScheduler+0xa8>)
 8002938:	4825      	ldr	r0, [pc, #148]	; (80029d0 <vTaskStartScheduler+0xac>)
 800293a:	f7ff fe33 	bl	80025a4 <xTaskCreate>
 800293e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d102      	bne.n	800294c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002946:	f000 fe31 	bl	80035ac <xTimerCreateTimerTask>
 800294a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d124      	bne.n	800299c <vTaskStartScheduler+0x78>
        __asm volatile
 8002952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	f3bf 8f6f 	isb	sy
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	60bb      	str	r3, [r7, #8]
    }
 8002964:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <vTaskStartScheduler+0xb0>)
 8002968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800296c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800296e:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <vTaskStartScheduler+0xb4>)
 8002970:	2201      	movs	r2, #1
 8002972:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <vTaskStartScheduler+0xb8>)
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <vTaskStartScheduler+0xbc>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <vTaskStartScheduler+0xa4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d102      	bne.n	800298c <vTaskStartScheduler+0x68>
 8002986:	f003 f80b 	bl	80059a0 <SEGGER_SYSVIEW_OnIdle>
 800298a:	e004      	b.n	8002996 <vTaskStartScheduler+0x72>
 800298c:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <vTaskStartScheduler+0xbc>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f003 f863 	bl	8005a5c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002996:	f001 f91d 	bl	8003bd4 <xPortStartScheduler>
 800299a:	e00e      	b.n	80029ba <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029a2:	d10a      	bne.n	80029ba <vTaskStartScheduler+0x96>
        __asm volatile
 80029a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a8:	f383 8811 	msr	BASEPRI, r3
 80029ac:	f3bf 8f6f 	isb	sy
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	607b      	str	r3, [r7, #4]
    }
 80029b6:	bf00      	nop
 80029b8:	e7fe      	b.n	80029b8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80029ba:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <vTaskStartScheduler+0xc0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
}
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200001b8 	.word	0x200001b8
 80029cc:	08006048 	.word	0x08006048
 80029d0:	080032e9 	.word	0x080032e9
 80029d4:	200001b4 	.word	0x200001b4
 80029d8:	200001a0 	.word	0x200001a0
 80029dc:	20000198 	.word	0x20000198
 80029e0:	200000bc 	.word	0x200000bc
 80029e4:	2000000c 	.word	0x2000000c

080029e8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80029ec:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <vTaskSuspendAll+0x18>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3301      	adds	r3, #1
 80029f2:	4a03      	ldr	r2, [pc, #12]	; (8002a00 <vTaskSuspendAll+0x18>)
 80029f4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80029f6:	bf00      	nop
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	200001bc 	.word	0x200001bc

08002a04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002a12:	4b73      	ldr	r3, [pc, #460]	; (8002be0 <xTaskResumeAll+0x1dc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10a      	bne.n	8002a30 <xTaskResumeAll+0x2c>
        __asm volatile
 8002a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1e:	f383 8811 	msr	BASEPRI, r3
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	607b      	str	r3, [r7, #4]
    }
 8002a2c:	bf00      	nop
 8002a2e:	e7fe      	b.n	8002a2e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002a30:	f001 f9f0 	bl	8003e14 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002a34:	4b6a      	ldr	r3, [pc, #424]	; (8002be0 <xTaskResumeAll+0x1dc>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	4a69      	ldr	r2, [pc, #420]	; (8002be0 <xTaskResumeAll+0x1dc>)
 8002a3c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a3e:	4b68      	ldr	r3, [pc, #416]	; (8002be0 <xTaskResumeAll+0x1dc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f040 80c4 	bne.w	8002bd0 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a48:	4b66      	ldr	r3, [pc, #408]	; (8002be4 <xTaskResumeAll+0x1e0>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80bf 	beq.w	8002bd0 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a52:	e08e      	b.n	8002b72 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a54:	4b64      	ldr	r3, [pc, #400]	; (8002be8 <xTaskResumeAll+0x1e4>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	6a12      	ldr	r2, [r2, #32]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	69d2      	ldr	r2, [r2, #28]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3318      	adds	r3, #24
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d103      	bne.n	8002a8a <xTaskResumeAll+0x86>
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	6a1a      	ldr	r2, [r3, #32]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	1e5a      	subs	r2, r3, #1
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	69fa      	ldr	r2, [r7, #28]
 8002aa6:	68d2      	ldr	r2, [r2, #12]
 8002aa8:	609a      	str	r2, [r3, #8]
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	6892      	ldr	r2, [r2, #8]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	3304      	adds	r3, #4
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d103      	bne.n	8002ac8 <xTaskResumeAll+0xc4>
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	605a      	str	r2, [r3, #4]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	2200      	movs	r2, #0
 8002acc:	615a      	str	r2, [r3, #20]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	1e5a      	subs	r2, r3, #1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f003 f800 	bl	8005ae0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	4b40      	ldr	r3, [pc, #256]	; (8002bec <xTaskResumeAll+0x1e8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	4a3f      	ldr	r2, [pc, #252]	; (8002bec <xTaskResumeAll+0x1e8>)
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af6:	493e      	ldr	r1, [pc, #248]	; (8002bf0 <xTaskResumeAll+0x1ec>)
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	3304      	adds	r3, #4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	609a      	str	r2, [r3, #8]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	3204      	adds	r2, #4
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	1d1a      	adds	r2, r3, #4
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4a2e      	ldr	r2, [pc, #184]	; (8002bf0 <xTaskResumeAll+0x1ec>)
 8002b36:	441a      	add	r2, r3
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	615a      	str	r2, [r3, #20]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b40:	492b      	ldr	r1, [pc, #172]	; (8002bf0 <xTaskResumeAll+0x1ec>)
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	1c59      	adds	r1, r3, #1
 8002b50:	4827      	ldr	r0, [pc, #156]	; (8002bf0 <xTaskResumeAll+0x1ec>)
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4403      	add	r3, r0
 8002b5c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b62:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <xTaskResumeAll+0x1f0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d302      	bcc.n	8002b72 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002b6c:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <xTaskResumeAll+0x1f4>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b72:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <xTaskResumeAll+0x1e4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f47f af6c 	bne.w	8002a54 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002b82:	f000 fc47 	bl	8003414 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002b86:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <xTaskResumeAll+0x1f8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d010      	beq.n	8002bb4 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002b92:	f000 f859 	bl	8002c48 <xTaskIncrementTick>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002b9c:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <xTaskResumeAll+0x1f4>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f1      	bne.n	8002b92 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002bae:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <xTaskResumeAll+0x1f8>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002bb4:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <xTaskResumeAll+0x1f4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d009      	beq.n	8002bd0 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <xTaskResumeAll+0x1fc>)
 8002bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002bd0:	f001 f950 	bl	8003e74 <vPortExitCritical>

    return xAlreadyYielded;
 8002bd4:	69bb      	ldr	r3, [r7, #24]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3720      	adds	r7, #32
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	200001bc 	.word	0x200001bc
 8002be4:	20000194 	.word	0x20000194
 8002be8:	20000154 	.word	0x20000154
 8002bec:	2000019c 	.word	0x2000019c
 8002bf0:	200000c0 	.word	0x200000c0
 8002bf4:	200000bc 	.word	0x200000bc
 8002bf8:	200001a8 	.word	0x200001a8
 8002bfc:	200001a4 	.word	0x200001a4
 8002c00:	e000ed04 	.word	0xe000ed04

08002c04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <xTaskGetTickCount+0x1c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002c10:	687b      	ldr	r3, [r7, #4]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20000198 	.word	0x20000198

08002c24 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c2a:	f001 f9df 	bl	8003fec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002c32:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <xTaskGetTickCountFromISR+0x20>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002c38:	683b      	ldr	r3, [r7, #0]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20000198 	.word	0x20000198

08002c48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	; 0x28
 8002c4c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c52:	4b7f      	ldr	r3, [pc, #508]	; (8002e50 <xTaskIncrementTick+0x208>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 80f0 	bne.w	8002e3c <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c5c:	4b7d      	ldr	r3, [pc, #500]	; (8002e54 <xTaskIncrementTick+0x20c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3301      	adds	r3, #1
 8002c62:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002c64:	4a7b      	ldr	r2, [pc, #492]	; (8002e54 <xTaskIncrementTick+0x20c>)
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d120      	bne.n	8002cb2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002c70:	4b79      	ldr	r3, [pc, #484]	; (8002e58 <xTaskIncrementTick+0x210>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <xTaskIncrementTick+0x48>
        __asm volatile
 8002c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7e:	f383 8811 	msr	BASEPRI, r3
 8002c82:	f3bf 8f6f 	isb	sy
 8002c86:	f3bf 8f4f 	dsb	sy
 8002c8a:	607b      	str	r3, [r7, #4]
    }
 8002c8c:	bf00      	nop
 8002c8e:	e7fe      	b.n	8002c8e <xTaskIncrementTick+0x46>
 8002c90:	4b71      	ldr	r3, [pc, #452]	; (8002e58 <xTaskIncrementTick+0x210>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	4b71      	ldr	r3, [pc, #452]	; (8002e5c <xTaskIncrementTick+0x214>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a6f      	ldr	r2, [pc, #444]	; (8002e58 <xTaskIncrementTick+0x210>)
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	4a6f      	ldr	r2, [pc, #444]	; (8002e5c <xTaskIncrementTick+0x214>)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b6e      	ldr	r3, [pc, #440]	; (8002e60 <xTaskIncrementTick+0x218>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	4a6d      	ldr	r2, [pc, #436]	; (8002e60 <xTaskIncrementTick+0x218>)
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	f000 fbb1 	bl	8003414 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002cb2:	4b6c      	ldr	r3, [pc, #432]	; (8002e64 <xTaskIncrementTick+0x21c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6a3a      	ldr	r2, [r7, #32]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	f0c0 80aa 	bcc.w	8002e12 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cbe:	4b66      	ldr	r3, [pc, #408]	; (8002e58 <xTaskIncrementTick+0x210>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d104      	bne.n	8002cd2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cc8:	4b66      	ldr	r3, [pc, #408]	; (8002e64 <xTaskIncrementTick+0x21c>)
 8002cca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cce:	601a      	str	r2, [r3, #0]
                    break;
 8002cd0:	e09f      	b.n	8002e12 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cd2:	4b61      	ldr	r3, [pc, #388]	; (8002e58 <xTaskIncrementTick+0x210>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002ce2:	6a3a      	ldr	r2, [r7, #32]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d203      	bcs.n	8002cf2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002cea:	4a5e      	ldr	r2, [pc, #376]	; (8002e64 <xTaskIncrementTick+0x21c>)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002cf0:	e08f      	b.n	8002e12 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	68d2      	ldr	r2, [r2, #12]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	6892      	ldr	r2, [r2, #8]
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	3304      	adds	r3, #4
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d103      	bne.n	8002d20 <xTaskIncrementTick+0xd8>
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2200      	movs	r2, #0
 8002d24:	615a      	str	r2, [r3, #20]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	1e5a      	subs	r2, r3, #1
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01e      	beq.n	8002d76 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	6a12      	ldr	r2, [r2, #32]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	69d2      	ldr	r2, [r2, #28]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	3318      	adds	r3, #24
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d103      	bne.n	8002d66 <xTaskIncrementTick+0x11e>
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	6a1a      	ldr	r2, [r3, #32]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	1e5a      	subs	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f002 feb1 	bl	8005ae0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	2201      	movs	r2, #1
 8002d84:	409a      	lsls	r2, r3
 8002d86:	4b38      	ldr	r3, [pc, #224]	; (8002e68 <xTaskIncrementTick+0x220>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	4a36      	ldr	r2, [pc, #216]	; (8002e68 <xTaskIncrementTick+0x220>)
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d94:	4935      	ldr	r1, [pc, #212]	; (8002e6c <xTaskIncrementTick+0x224>)
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	3304      	adds	r3, #4
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	60da      	str	r2, [r3, #12]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	3204      	adds	r2, #4
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	1d1a      	adds	r2, r3, #4
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <xTaskIncrementTick+0x224>)
 8002dd4:	441a      	add	r2, r3
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	615a      	str	r2, [r3, #20]
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dde:	4923      	ldr	r1, [pc, #140]	; (8002e6c <xTaskIncrementTick+0x224>)
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	1c59      	adds	r1, r3, #1
 8002dee:	481f      	ldr	r0, [pc, #124]	; (8002e6c <xTaskIncrementTick+0x224>)
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4403      	add	r3, r0
 8002dfa:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e00:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <xTaskIncrementTick+0x228>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	429a      	cmp	r2, r3
 8002e08:	f67f af59 	bls.w	8002cbe <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e10:	e755      	b.n	8002cbe <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e12:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <xTaskIncrementTick+0x228>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e18:	4914      	ldr	r1, [pc, #80]	; (8002e6c <xTaskIncrementTick+0x224>)
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d901      	bls.n	8002e2e <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002e2e:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <xTaskIncrementTick+0x22c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8002e36:	2301      	movs	r3, #1
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3a:	e004      	b.n	8002e46 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <xTaskIncrementTick+0x230>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	4a0d      	ldr	r2, [pc, #52]	; (8002e78 <xTaskIncrementTick+0x230>)
 8002e44:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3728      	adds	r7, #40	; 0x28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	200001bc 	.word	0x200001bc
 8002e54:	20000198 	.word	0x20000198
 8002e58:	2000014c 	.word	0x2000014c
 8002e5c:	20000150 	.word	0x20000150
 8002e60:	200001ac 	.word	0x200001ac
 8002e64:	200001b4 	.word	0x200001b4
 8002e68:	2000019c 	.word	0x2000019c
 8002e6c:	200000c0 	.word	0x200000c0
 8002e70:	200000bc 	.word	0x200000bc
 8002e74:	200001a8 	.word	0x200001a8
 8002e78:	200001a4 	.word	0x200001a4

08002e7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e82:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <vTaskSwitchContext+0xbc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002e8a:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <vTaskSwitchContext+0xc0>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002e90:	e04d      	b.n	8002f2e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002e92:	4b2a      	ldr	r3, [pc, #168]	; (8002f3c <vTaskSwitchContext+0xc0>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e98:	4b29      	ldr	r3, [pc, #164]	; (8002f40 <vTaskSwitchContext+0xc4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002ea6:	7afb      	ldrb	r3, [r7, #11]
 8002ea8:	f1c3 031f 	rsb	r3, r3, #31
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	4925      	ldr	r1, [pc, #148]	; (8002f44 <vTaskSwitchContext+0xc8>)
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10a      	bne.n	8002ed8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec6:	f383 8811 	msr	BASEPRI, r3
 8002eca:	f3bf 8f6f 	isb	sy
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	607b      	str	r3, [r7, #4]
    }
 8002ed4:	bf00      	nop
 8002ed6:	e7fe      	b.n	8002ed6 <vTaskSwitchContext+0x5a>
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4a18      	ldr	r2, [pc, #96]	; (8002f44 <vTaskSwitchContext+0xc8>)
 8002ee4:	4413      	add	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	3308      	adds	r3, #8
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d104      	bne.n	8002f08 <vTaskSwitchContext+0x8c>
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	4a0e      	ldr	r2, [pc, #56]	; (8002f48 <vTaskSwitchContext+0xcc>)
 8002f10:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002f12:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <vTaskSwitchContext+0xcc>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <vTaskSwitchContext+0xd0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d102      	bne.n	8002f24 <vTaskSwitchContext+0xa8>
 8002f1e:	f002 fd3f 	bl	80059a0 <SEGGER_SYSVIEW_OnIdle>
}
 8002f22:	e004      	b.n	8002f2e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002f24:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <vTaskSwitchContext+0xcc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f002 fd97 	bl	8005a5c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002f2e:	bf00      	nop
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200001bc 	.word	0x200001bc
 8002f3c:	200001a8 	.word	0x200001a8
 8002f40:	2000019c 	.word	0x2000019c
 8002f44:	200000c0 	.word	0x200000c0
 8002f48:	200000bc 	.word	0x200000bc
 8002f4c:	200001b8 	.word	0x200001b8

08002f50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	60fb      	str	r3, [r7, #12]
    }
 8002f72:	bf00      	nop
 8002f74:	e7fe      	b.n	8002f74 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f76:	4b07      	ldr	r3, [pc, #28]	; (8002f94 <vTaskPlaceOnEventList+0x44>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3318      	adds	r3, #24
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fe ff7d 	bl	8001e7e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f84:	2101      	movs	r1, #1
 8002f86:	6838      	ldr	r0, [r7, #0]
 8002f88:	f000 fa7e 	bl	8003488 <prvAddCurrentTaskToDelayedList>
}
 8002f8c:	bf00      	nop
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	200000bc 	.word	0x200000bc

08002f98 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10a      	bne.n	8002fc0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fae:	f383 8811 	msr	BASEPRI, r3
 8002fb2:	f3bf 8f6f 	isb	sy
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	613b      	str	r3, [r7, #16]
    }
 8002fbc:	bf00      	nop
 8002fbe:	e7fe      	b.n	8002fbe <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	4b17      	ldr	r3, [pc, #92]	; (8003024 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	61da      	str	r2, [r3, #28]
 8002fce:	4b15      	ldr	r3, [pc, #84]	; (8003024 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	6892      	ldr	r2, [r2, #8]
 8002fd6:	621a      	str	r2, [r3, #32]
 8002fd8:	4b12      	ldr	r3, [pc, #72]	; (8003024 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	3218      	adds	r2, #24
 8002fe2:	605a      	str	r2, [r3, #4]
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f103 0218 	add.w	r2, r3, #24
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800300c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800300e:	2024      	movs	r0, #36	; 0x24
 8003010:	f001 ffc6 	bl	8004fa0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	68b8      	ldr	r0, [r7, #8]
 8003018:	f000 fa36 	bl	8003488 <prvAddCurrentTaskToDelayedList>
    }
 800301c:	bf00      	nop
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	200000bc 	.word	0x200000bc

08003028 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08a      	sub	sp, #40	; 0x28
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	60fb      	str	r3, [r7, #12]
    }
 8003050:	bf00      	nop
 8003052:	e7fe      	b.n	8003052 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	6a3a      	ldr	r2, [r7, #32]
 8003060:	6a12      	ldr	r2, [r2, #32]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	6a3a      	ldr	r2, [r7, #32]
 800306a:	69d2      	ldr	r2, [r2, #28]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	3318      	adds	r3, #24
 8003076:	429a      	cmp	r2, r3
 8003078:	d103      	bne.n	8003082 <xTaskRemoveFromEventList+0x5a>
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	6a1a      	ldr	r2, [r3, #32]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	2200      	movs	r2, #0
 8003086:	629a      	str	r2, [r3, #40]	; 0x28
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	1e5a      	subs	r2, r3, #1
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003092:	4b4b      	ldr	r3, [pc, #300]	; (80031c0 <xTaskRemoveFromEventList+0x198>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d162      	bne.n	8003160 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	6a3a      	ldr	r2, [r7, #32]
 80030a6:	68d2      	ldr	r2, [r2, #12]
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	6a3a      	ldr	r2, [r7, #32]
 80030b0:	6892      	ldr	r2, [r2, #8]
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	3304      	adds	r3, #4
 80030bc:	429a      	cmp	r2, r3
 80030be:	d103      	bne.n	80030c8 <xTaskRemoveFromEventList+0xa0>
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	2200      	movs	r2, #0
 80030cc:	615a      	str	r2, [r3, #20]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	1e5a      	subs	r2, r3, #1
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	4618      	mov	r0, r3
 80030dc:	f002 fd00 	bl	8005ae0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	2201      	movs	r2, #1
 80030e6:	409a      	lsls	r2, r3
 80030e8:	4b36      	ldr	r3, [pc, #216]	; (80031c4 <xTaskRemoveFromEventList+0x19c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	4a35      	ldr	r2, [pc, #212]	; (80031c4 <xTaskRemoveFromEventList+0x19c>)
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f6:	4934      	ldr	r1, [pc, #208]	; (80031c8 <xTaskRemoveFromEventList+0x1a0>)
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	3304      	adds	r3, #4
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	609a      	str	r2, [r3, #8]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	6a3a      	ldr	r2, [r7, #32]
 800311c:	3204      	adds	r2, #4
 800311e:	605a      	str	r2, [r3, #4]
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	1d1a      	adds	r2, r3, #4
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4a24      	ldr	r2, [pc, #144]	; (80031c8 <xTaskRemoveFromEventList+0x1a0>)
 8003136:	441a      	add	r2, r3
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	615a      	str	r2, [r3, #20]
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003140:	4921      	ldr	r1, [pc, #132]	; (80031c8 <xTaskRemoveFromEventList+0x1a0>)
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	1c59      	adds	r1, r3, #1
 8003150:	481d      	ldr	r0, [pc, #116]	; (80031c8 <xTaskRemoveFromEventList+0x1a0>)
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4403      	add	r3, r0
 800315c:	6019      	str	r1, [r3, #0]
 800315e:	e01b      	b.n	8003198 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003160:	4b1a      	ldr	r3, [pc, #104]	; (80031cc <xTaskRemoveFromEventList+0x1a4>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	61bb      	str	r3, [r7, #24]
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	61da      	str	r2, [r3, #28]
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	621a      	str	r2, [r3, #32]
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	6a3a      	ldr	r2, [r7, #32]
 800317a:	3218      	adds	r2, #24
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	f103 0218 	add.w	r2, r3, #24
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	4a10      	ldr	r2, [pc, #64]	; (80031cc <xTaskRemoveFromEventList+0x1a4>)
 800318c:	629a      	str	r2, [r3, #40]	; 0x28
 800318e:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <xTaskRemoveFromEventList+0x1a4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3301      	adds	r3, #1
 8003194:	4a0d      	ldr	r2, [pc, #52]	; (80031cc <xTaskRemoveFromEventList+0x1a4>)
 8003196:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319c:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <xTaskRemoveFromEventList+0x1a8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d905      	bls.n	80031b2 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80031a6:	2301      	movs	r3, #1
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80031aa:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <xTaskRemoveFromEventList+0x1ac>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	e001      	b.n	80031b6 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3728      	adds	r7, #40	; 0x28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	200001bc 	.word	0x200001bc
 80031c4:	2000019c 	.word	0x2000019c
 80031c8:	200000c0 	.word	0x200000c0
 80031cc:	20000154 	.word	0x20000154
 80031d0:	200000bc 	.word	0x200000bc
 80031d4:	200001a8 	.word	0x200001a8

080031d8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <vTaskInternalSetTimeOutState+0x24>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <vTaskInternalSetTimeOutState+0x28>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	605a      	str	r2, [r3, #4]
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	200001ac 	.word	0x200001ac
 8003200:	20000198 	.word	0x20000198

08003204 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10a      	bne.n	800322a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	613b      	str	r3, [r7, #16]
    }
 8003226:	bf00      	nop
 8003228:	e7fe      	b.n	8003228 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10a      	bne.n	8003246 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	60fb      	str	r3, [r7, #12]
    }
 8003242:	bf00      	nop
 8003244:	e7fe      	b.n	8003244 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003246:	f000 fde5 	bl	8003e14 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800324a:	4b1f      	ldr	r3, [pc, #124]	; (80032c8 <xTaskCheckForTimeOut+0xc4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003262:	d102      	bne.n	800326a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003264:	2300      	movs	r3, #0
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	e026      	b.n	80032b8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4b17      	ldr	r3, [pc, #92]	; (80032cc <xTaskCheckForTimeOut+0xc8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d00a      	beq.n	800328c <xTaskCheckForTimeOut+0x88>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	429a      	cmp	r2, r3
 800327e:	d305      	bcc.n	800328c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003280:	2301      	movs	r3, #1
 8003282:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	e015      	b.n	80032b8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	429a      	cmp	r2, r3
 8003294:	d20b      	bcs.n	80032ae <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	1ad2      	subs	r2, r2, r3
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff ff98 	bl	80031d8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61fb      	str	r3, [r7, #28]
 80032ac:	e004      	b.n	80032b8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80032b4:	2301      	movs	r3, #1
 80032b6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80032b8:	f000 fddc 	bl	8003e74 <vPortExitCritical>

    return xReturn;
 80032bc:	69fb      	ldr	r3, [r7, #28]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3720      	adds	r7, #32
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000198 	.word	0x20000198
 80032cc:	200001ac 	.word	0x200001ac

080032d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80032d4:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <vTaskMissedYield+0x14>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
}
 80032da:	bf00      	nop
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	200001a8 	.word	0x200001a8

080032e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80032f0:	f000 f852 	bl	8003398 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <prvIdleTask+0x28>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d9f9      	bls.n	80032f0 <prvIdleTask+0x8>
            {
                taskYIELD();
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <prvIdleTask+0x2c>)
 80032fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800330c:	e7f0      	b.n	80032f0 <prvIdleTask+0x8>
 800330e:	bf00      	nop
 8003310:	200000c0 	.word	0x200000c0
 8003314:	e000ed04 	.word	0xe000ed04

08003318 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800331e:	2300      	movs	r3, #0
 8003320:	607b      	str	r3, [r7, #4]
 8003322:	e00c      	b.n	800333e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4a12      	ldr	r2, [pc, #72]	; (8003378 <prvInitialiseTaskLists+0x60>)
 8003330:	4413      	add	r3, r2
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe fd76 	bl	8001e24 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3301      	adds	r3, #1
 800333c:	607b      	str	r3, [r7, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b04      	cmp	r3, #4
 8003342:	d9ef      	bls.n	8003324 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003344:	480d      	ldr	r0, [pc, #52]	; (800337c <prvInitialiseTaskLists+0x64>)
 8003346:	f7fe fd6d 	bl	8001e24 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800334a:	480d      	ldr	r0, [pc, #52]	; (8003380 <prvInitialiseTaskLists+0x68>)
 800334c:	f7fe fd6a 	bl	8001e24 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003350:	480c      	ldr	r0, [pc, #48]	; (8003384 <prvInitialiseTaskLists+0x6c>)
 8003352:	f7fe fd67 	bl	8001e24 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003356:	480c      	ldr	r0, [pc, #48]	; (8003388 <prvInitialiseTaskLists+0x70>)
 8003358:	f7fe fd64 	bl	8001e24 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800335c:	480b      	ldr	r0, [pc, #44]	; (800338c <prvInitialiseTaskLists+0x74>)
 800335e:	f7fe fd61 	bl	8001e24 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003362:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <prvInitialiseTaskLists+0x78>)
 8003364:	4a05      	ldr	r2, [pc, #20]	; (800337c <prvInitialiseTaskLists+0x64>)
 8003366:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003368:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <prvInitialiseTaskLists+0x7c>)
 800336a:	4a05      	ldr	r2, [pc, #20]	; (8003380 <prvInitialiseTaskLists+0x68>)
 800336c:	601a      	str	r2, [r3, #0]
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	200000c0 	.word	0x200000c0
 800337c:	20000124 	.word	0x20000124
 8003380:	20000138 	.word	0x20000138
 8003384:	20000154 	.word	0x20000154
 8003388:	20000168 	.word	0x20000168
 800338c:	20000180 	.word	0x20000180
 8003390:	2000014c 	.word	0x2000014c
 8003394:	20000150 	.word	0x20000150

08003398 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800339e:	e019      	b.n	80033d4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80033a0:	f000 fd38 	bl	8003e14 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033a4:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <prvCheckTasksWaitingTermination+0x50>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3304      	adds	r3, #4
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fe fd9d 	bl	8001ef0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80033b6:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <prvCheckTasksWaitingTermination+0x54>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	4a0b      	ldr	r2, [pc, #44]	; (80033ec <prvCheckTasksWaitingTermination+0x54>)
 80033be:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <prvCheckTasksWaitingTermination+0x58>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <prvCheckTasksWaitingTermination+0x58>)
 80033c8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80033ca:	f000 fd53 	bl	8003e74 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f810 	bl	80033f4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <prvCheckTasksWaitingTermination+0x58>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e1      	bne.n	80033a0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000168 	.word	0x20000168
 80033ec:	20000194 	.word	0x20000194
 80033f0:	2000017c 	.word	0x2000017c

080033f4 <prvDeleteTCB>:


#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	4618      	mov	r0, r3
 8003402:	f000 feed 	bl	80041e0 <vPortFree>
            vPortFree( pxTCB );
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 feea 	bl	80041e0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003418:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <prvResetNextTaskUnblockTime+0x30>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d104      	bne.n	800342c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003422:	4b09      	ldr	r3, [pc, #36]	; (8003448 <prvResetNextTaskUnblockTime+0x34>)
 8003424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003428:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800342a:	e005      	b.n	8003438 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <prvResetNextTaskUnblockTime+0x30>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a04      	ldr	r2, [pc, #16]	; (8003448 <prvResetNextTaskUnblockTime+0x34>)
 8003436:	6013      	str	r3, [r2, #0]
}
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	2000014c 	.word	0x2000014c
 8003448:	200001b4 	.word	0x200001b4

0800344c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003452:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <xTaskGetSchedulerState+0x34>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d102      	bne.n	8003460 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800345a:	2301      	movs	r3, #1
 800345c:	607b      	str	r3, [r7, #4]
 800345e:	e008      	b.n	8003472 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003460:	4b08      	ldr	r3, [pc, #32]	; (8003484 <xTaskGetSchedulerState+0x38>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d102      	bne.n	800346e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003468:	2302      	movs	r3, #2
 800346a:	607b      	str	r3, [r7, #4]
 800346c:	e001      	b.n	8003472 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800346e:	2300      	movs	r3, #0
 8003470:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003472:	687b      	ldr	r3, [r7, #4]
    }
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	200001a0 	.word	0x200001a0
 8003484:	200001bc 	.word	0x200001bc

08003488 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003492:	4b3f      	ldr	r3, [pc, #252]	; (8003590 <prvAddCurrentTaskToDelayedList+0x108>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003498:	4b3e      	ldr	r3, [pc, #248]	; (8003594 <prvAddCurrentTaskToDelayedList+0x10c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3304      	adds	r3, #4
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fe fd26 	bl	8001ef0 <uxListRemove>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10b      	bne.n	80034c2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80034aa:	4b3a      	ldr	r3, [pc, #232]	; (8003594 <prvAddCurrentTaskToDelayedList+0x10c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	2201      	movs	r2, #1
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	4b37      	ldr	r3, [pc, #220]	; (8003598 <prvAddCurrentTaskToDelayedList+0x110>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4013      	ands	r3, r2
 80034be:	4a36      	ldr	r2, [pc, #216]	; (8003598 <prvAddCurrentTaskToDelayedList+0x110>)
 80034c0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034c8:	d12a      	bne.n	8003520 <prvAddCurrentTaskToDelayedList+0x98>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d027      	beq.n	8003520 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
        	traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80034d0:	4b30      	ldr	r3, [pc, #192]	; (8003594 <prvAddCurrentTaskToDelayedList+0x10c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	211b      	movs	r1, #27
 80034d6:	4618      	mov	r0, r3
 80034d8:	f002 fb44 	bl	8005b64 <SEGGER_SYSVIEW_OnTaskStopReady>
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034dc:	4b2f      	ldr	r3, [pc, #188]	; (800359c <prvAddCurrentTaskToDelayedList+0x114>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	4b2c      	ldr	r3, [pc, #176]	; (8003594 <prvAddCurrentTaskToDelayedList+0x10c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	4b2a      	ldr	r3, [pc, #168]	; (8003594 <prvAddCurrentTaskToDelayedList+0x10c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	6892      	ldr	r2, [r2, #8]
 80034f2:	60da      	str	r2, [r3, #12]
 80034f4:	4b27      	ldr	r3, [pc, #156]	; (8003594 <prvAddCurrentTaskToDelayedList+0x10c>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	3204      	adds	r2, #4
 80034fe:	605a      	str	r2, [r3, #4]
 8003500:	4b24      	ldr	r3, [pc, #144]	; (8003594 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	1d1a      	adds	r2, r3, #4
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	4b22      	ldr	r3, [pc, #136]	; (8003594 <prvAddCurrentTaskToDelayedList+0x10c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a23      	ldr	r2, [pc, #140]	; (800359c <prvAddCurrentTaskToDelayedList+0x114>)
 8003510:	615a      	str	r2, [r3, #20]
 8003512:	4b22      	ldr	r3, [pc, #136]	; (800359c <prvAddCurrentTaskToDelayedList+0x114>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	4a20      	ldr	r2, [pc, #128]	; (800359c <prvAddCurrentTaskToDelayedList+0x114>)
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800351e:	e032      	b.n	8003586 <prvAddCurrentTaskToDelayedList+0xfe>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003528:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <prvAddCurrentTaskToDelayedList+0x10c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	429a      	cmp	r2, r3
 8003536:	d20f      	bcs.n	8003558 <prvAddCurrentTaskToDelayedList+0xd0>
            	traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003538:	4b16      	ldr	r3, [pc, #88]	; (8003594 <prvAddCurrentTaskToDelayedList+0x10c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2104      	movs	r1, #4
 800353e:	4618      	mov	r0, r3
 8003540:	f002 fb10 	bl	8005b64 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003544:	4b16      	ldr	r3, [pc, #88]	; (80035a0 <prvAddCurrentTaskToDelayedList+0x118>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4b12      	ldr	r3, [pc, #72]	; (8003594 <prvAddCurrentTaskToDelayedList+0x10c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3304      	adds	r3, #4
 800354e:	4619      	mov	r1, r3
 8003550:	4610      	mov	r0, r2
 8003552:	f7fe fc94 	bl	8001e7e <vListInsert>
}
 8003556:	e016      	b.n	8003586 <prvAddCurrentTaskToDelayedList+0xfe>
            	traceMOVED_TASK_TO_DELAYED_LIST();
 8003558:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <prvAddCurrentTaskToDelayedList+0x10c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2104      	movs	r1, #4
 800355e:	4618      	mov	r0, r3
 8003560:	f002 fb00 	bl	8005b64 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003564:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <prvAddCurrentTaskToDelayedList+0x11c>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <prvAddCurrentTaskToDelayedList+0x10c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3304      	adds	r3, #4
 800356e:	4619      	mov	r1, r3
 8003570:	4610      	mov	r0, r2
 8003572:	f7fe fc84 	bl	8001e7e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003576:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <prvAddCurrentTaskToDelayedList+0x120>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	429a      	cmp	r2, r3
 800357e:	d202      	bcs.n	8003586 <prvAddCurrentTaskToDelayedList+0xfe>
                    xNextTaskUnblockTime = xTimeToWake;
 8003580:	4a09      	ldr	r2, [pc, #36]	; (80035a8 <prvAddCurrentTaskToDelayedList+0x120>)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6013      	str	r3, [r2, #0]
}
 8003586:	bf00      	nop
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20000198 	.word	0x20000198
 8003594:	200000bc 	.word	0x200000bc
 8003598:	2000019c 	.word	0x2000019c
 800359c:	20000180 	.word	0x20000180
 80035a0:	20000150 	.word	0x20000150
 80035a4:	2000014c 	.word	0x2000014c
 80035a8:	200001b4 	.word	0x200001b4

080035ac <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80035b6:	f000 fa47 	bl	8003a48 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80035ba:	4b11      	ldr	r3, [pc, #68]	; (8003600 <xTimerCreateTimerTask+0x54>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <xTimerCreateTimerTask+0x58>)
 80035c4:	9301      	str	r3, [sp, #4]
 80035c6:	2302      	movs	r3, #2
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	2300      	movs	r3, #0
 80035cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035d0:	490d      	ldr	r1, [pc, #52]	; (8003608 <xTimerCreateTimerTask+0x5c>)
 80035d2:	480e      	ldr	r0, [pc, #56]	; (800360c <xTimerCreateTimerTask+0x60>)
 80035d4:	f7fe ffe6 	bl	80025a4 <xTaskCreate>
 80035d8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	603b      	str	r3, [r7, #0]
    }
 80035f2:	bf00      	nop
 80035f4:	e7fe      	b.n	80035f4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80035f6:	687b      	ldr	r3, [r7, #4]
    }
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	200001f0 	.word	0x200001f0
 8003604:	200001f4 	.word	0x200001f4
 8003608:	08006050 	.word	0x08006050
 800360c:	080036b5 	.word	0x080036b5

08003610 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800361c:	e008      	b.n	8003630 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	4413      	add	r3, r2
 8003626:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	699a      	ldr	r2, [r3, #24]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	18d1      	adds	r1, r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f8dd 	bl	80037fc <prvInsertTimerInActiveList>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1ea      	bne.n	800361e <prvReloadTimer+0xe>
        }
    }
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800365e:	4b14      	ldr	r3, [pc, #80]	; (80036b0 <prvProcessExpiredTimer+0x5c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	3304      	adds	r3, #4
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe fc3f 	bl	8001ef0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff ffc3 	bl	8003610 <prvReloadTimer>
 800368a:	e008      	b.n	800369e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003692:	f023 0301 	bic.w	r3, r3, #1
 8003696:	b2da      	uxtb	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	4798      	blx	r3
    }
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	200001e8 	.word	0x200001e8

080036b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036bc:	f107 0308 	add.w	r3, r7, #8
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 f857 	bl	8003774 <prvGetNextExpireTime>
 80036c6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4619      	mov	r1, r3
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f803 	bl	80036d8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80036d2:	f000 f8d5 	bl	8003880 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036d6:	e7f1      	b.n	80036bc <prvTimerTask+0x8>

080036d8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80036e2:	f7ff f981 	bl	80029e8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036e6:	f107 0308 	add.w	r3, r7, #8
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f866 	bl	80037bc <prvSampleTimeNow>
 80036f0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d130      	bne.n	800375a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10a      	bne.n	8003714 <prvProcessTimerOrBlockTask+0x3c>
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	429a      	cmp	r2, r3
 8003704:	d806      	bhi.n	8003714 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003706:	f7ff f97d 	bl	8002a04 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800370a:	68f9      	ldr	r1, [r7, #12]
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff ffa1 	bl	8003654 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003712:	e024      	b.n	800375e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d008      	beq.n	800372c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800371a:	4b13      	ldr	r3, [pc, #76]	; (8003768 <prvProcessTimerOrBlockTask+0x90>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <prvProcessTimerOrBlockTask+0x50>
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <prvProcessTimerOrBlockTask+0x52>
 8003728:	2300      	movs	r3, #0
 800372a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800372c:	4b0f      	ldr	r3, [pc, #60]	; (800376c <prvProcessTimerOrBlockTask+0x94>)
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	4619      	mov	r1, r3
 800373a:	f7fe feff 	bl	800253c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800373e:	f7ff f961 	bl	8002a04 <xTaskResumeAll>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003748:	4b09      	ldr	r3, [pc, #36]	; (8003770 <prvProcessTimerOrBlockTask+0x98>)
 800374a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	f3bf 8f6f 	isb	sy
    }
 8003758:	e001      	b.n	800375e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800375a:	f7ff f953 	bl	8002a04 <xTaskResumeAll>
    }
 800375e:	bf00      	nop
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	200001ec 	.word	0x200001ec
 800376c:	200001f0 	.word	0x200001f0
 8003770:	e000ed04 	.word	0xe000ed04

08003774 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800377c:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <prvGetNextExpireTime+0x44>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <prvGetNextExpireTime+0x16>
 8003786:	2201      	movs	r2, #1
 8003788:	e000      	b.n	800378c <prvGetNextExpireTime+0x18>
 800378a:	2200      	movs	r2, #0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d105      	bne.n	80037a4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003798:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <prvGetNextExpireTime+0x44>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	e001      	b.n	80037a8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80037a8:	68fb      	ldr	r3, [r7, #12]
    }
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	200001e8 	.word	0x200001e8

080037bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80037c4:	f7ff fa1e 	bl	8002c04 <xTaskGetTickCount>
 80037c8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80037ca:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <prvSampleTimeNow+0x3c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d205      	bcs.n	80037e0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80037d4:	f000 f912 	bl	80039fc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e002      	b.n	80037e6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80037e6:	4a04      	ldr	r2, [pc, #16]	; (80037f8 <prvSampleTimeNow+0x3c>)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80037ec:	68fb      	ldr	r3, [r7, #12]
    }
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	200001f8 	.word	0x200001f8

080037fc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	429a      	cmp	r2, r3
 8003820:	d812      	bhi.n	8003848 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	1ad2      	subs	r2, r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	429a      	cmp	r2, r3
 800382e:	d302      	bcc.n	8003836 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003830:	2301      	movs	r3, #1
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	e01b      	b.n	800386e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003836:	4b10      	ldr	r3, [pc, #64]	; (8003878 <prvInsertTimerInActiveList+0x7c>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	3304      	adds	r3, #4
 800383e:	4619      	mov	r1, r3
 8003840:	4610      	mov	r0, r2
 8003842:	f7fe fb1c 	bl	8001e7e <vListInsert>
 8003846:	e012      	b.n	800386e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d206      	bcs.n	800385e <prvInsertTimerInActiveList+0x62>
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d302      	bcc.n	800385e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003858:	2301      	movs	r3, #1
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	e007      	b.n	800386e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800385e:	4b07      	ldr	r3, [pc, #28]	; (800387c <prvInsertTimerInActiveList+0x80>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	3304      	adds	r3, #4
 8003866:	4619      	mov	r1, r3
 8003868:	4610      	mov	r0, r2
 800386a:	f7fe fb08 	bl	8001e7e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800386e:	697b      	ldr	r3, [r7, #20]
    }
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	200001ec 	.word	0x200001ec
 800387c:	200001e8 	.word	0x200001e8

08003880 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003886:	e0a6      	b.n	80039d6 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	f2c0 80a2 	blt.w	80039d4 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d004      	beq.n	80038a6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	3304      	adds	r3, #4
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fe fb25 	bl	8001ef0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038a6:	1d3b      	adds	r3, r7, #4
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff ff87 	bl	80037bc <prvSampleTimeNow>
 80038ae:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	f200 808e 	bhi.w	80039d6 <prvProcessReceivedCommands+0x156>
 80038ba:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <prvProcessReceivedCommands+0x40>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	080038e5 	.word	0x080038e5
 80038c4:	080038e5 	.word	0x080038e5
 80038c8:	0800394d 	.word	0x0800394d
 80038cc:	08003961 	.word	0x08003961
 80038d0:	080039ab 	.word	0x080039ab
 80038d4:	080038e5 	.word	0x080038e5
 80038d8:	080038e5 	.word	0x080038e5
 80038dc:	0800394d 	.word	0x0800394d
 80038e0:	08003961 	.word	0x08003961
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	18d1      	adds	r1, r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	69f8      	ldr	r0, [r7, #28]
 8003904:	f7ff ff7a 	bl	80037fc <prvInsertTimerInActiveList>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d063      	beq.n	80039d6 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d009      	beq.n	8003930 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	4413      	add	r3, r2
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4619      	mov	r1, r3
 8003928:	69f8      	ldr	r0, [r7, #28]
 800392a:	f7ff fe71 	bl	8003610 <prvReloadTimer>
 800392e:	e008      	b.n	8003942 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	b2da      	uxtb	r2, r3
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	69f8      	ldr	r0, [r7, #28]
 8003948:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800394a:	e044      	b.n	80039d6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003952:	f023 0301 	bic.w	r3, r3, #1
 8003956:	b2da      	uxtb	r2, r3
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800395e:	e03a      	b.n	80039d6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	b2da      	uxtb	r2, r3
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10a      	bne.n	8003996 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	617b      	str	r3, [r7, #20]
    }
 8003992:	bf00      	nop
 8003994:	e7fe      	b.n	8003994 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	18d1      	adds	r1, r2, r3
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	69f8      	ldr	r0, [r7, #28]
 80039a4:	f7ff ff2a 	bl	80037fc <prvInsertTimerInActiveList>
                        break;
 80039a8:	e015      	b.n	80039d6 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d103      	bne.n	80039c0 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80039b8:	69f8      	ldr	r0, [r7, #28]
 80039ba:	f000 fc11 	bl	80041e0 <vPortFree>
 80039be:	e00a      	b.n	80039d6 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80039d2:	e000      	b.n	80039d6 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80039d4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039d6:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <prvProcessReceivedCommands+0x178>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f107 0108 	add.w	r1, r7, #8
 80039de:	2200      	movs	r2, #0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fe fbb7 	bl	8002154 <xQueueReceive>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f47f af4d 	bne.w	8003888 <prvProcessReceivedCommands+0x8>
        }
    }
 80039ee:	bf00      	nop
 80039f0:	bf00      	nop
 80039f2:	3720      	adds	r7, #32
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	200001f0 	.word	0x200001f0

080039fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a02:	e009      	b.n	8003a18 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a04:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <prvSwitchTimerLists+0x44>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003a0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a12:	6838      	ldr	r0, [r7, #0]
 8003a14:	f7ff fe1e 	bl	8003654 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a18:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <prvSwitchTimerLists+0x44>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003a22:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <prvSwitchTimerLists+0x44>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <prvSwitchTimerLists+0x48>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a04      	ldr	r2, [pc, #16]	; (8003a40 <prvSwitchTimerLists+0x44>)
 8003a2e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003a30:	4a04      	ldr	r2, [pc, #16]	; (8003a44 <prvSwitchTimerLists+0x48>)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6013      	str	r3, [r2, #0]
    }
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200001e8 	.word	0x200001e8
 8003a44:	200001ec 	.word	0x200001ec

08003a48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003a4c:	f000 f9e2 	bl	8003e14 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003a50:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <prvCheckForValidListAndQueue+0x54>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d11d      	bne.n	8003a94 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003a58:	4811      	ldr	r0, [pc, #68]	; (8003aa0 <prvCheckForValidListAndQueue+0x58>)
 8003a5a:	f7fe f9e3 	bl	8001e24 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003a5e:	4811      	ldr	r0, [pc, #68]	; (8003aa4 <prvCheckForValidListAndQueue+0x5c>)
 8003a60:	f7fe f9e0 	bl	8001e24 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003a64:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <prvCheckForValidListAndQueue+0x60>)
 8003a66:	4a0e      	ldr	r2, [pc, #56]	; (8003aa0 <prvCheckForValidListAndQueue+0x58>)
 8003a68:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003a6a:	4b10      	ldr	r3, [pc, #64]	; (8003aac <prvCheckForValidListAndQueue+0x64>)
 8003a6c:	4a0d      	ldr	r2, [pc, #52]	; (8003aa4 <prvCheckForValidListAndQueue+0x5c>)
 8003a6e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003a70:	2200      	movs	r2, #0
 8003a72:	210c      	movs	r1, #12
 8003a74:	200a      	movs	r0, #10
 8003a76:	f7fe faf5 	bl	8002064 <xQueueGenericCreate>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <prvCheckForValidListAndQueue+0x54>)
 8003a7e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003a80:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <prvCheckForValidListAndQueue+0x54>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a88:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <prvCheckForValidListAndQueue+0x54>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4908      	ldr	r1, [pc, #32]	; (8003ab0 <prvCheckForValidListAndQueue+0x68>)
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fe fcfe 	bl	8002490 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003a94:	f000 f9ee 	bl	8003e74 <vPortExitCritical>
    }
 8003a98:	bf00      	nop
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	200001f0 	.word	0x200001f0
 8003aa0:	200001c0 	.word	0x200001c0
 8003aa4:	200001d4 	.word	0x200001d4
 8003aa8:	200001e8 	.word	0x200001e8
 8003aac:	200001ec 	.word	0x200001ec
 8003ab0:	08006058 	.word	0x08006058

08003ab4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3b04      	subs	r3, #4
 8003ac4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003acc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3b04      	subs	r3, #4
 8003ad2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f023 0201 	bic.w	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	3b04      	subs	r3, #4
 8003ae2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003ae4:	4a0c      	ldr	r2, [pc, #48]	; (8003b18 <pxPortInitialiseStack+0x64>)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3b14      	subs	r3, #20
 8003aee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3b04      	subs	r3, #4
 8003afa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f06f 0202 	mvn.w	r2, #2
 8003b02:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3b20      	subs	r3, #32
 8003b08:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	08003b1d 	.word	0x08003b1d

08003b1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003b26:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <prvTaskExitError+0x54>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b2e:	d00a      	beq.n	8003b46 <prvTaskExitError+0x2a>
        __asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	60fb      	str	r3, [r7, #12]
    }
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <prvTaskExitError+0x28>
        __asm volatile
 8003b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4a:	f383 8811 	msr	BASEPRI, r3
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	60bb      	str	r3, [r7, #8]
    }
 8003b58:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003b5a:	bf00      	nop
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0fc      	beq.n	8003b5c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003b62:	bf00      	nop
 8003b64:	bf00      	nop
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	20000010 	.word	0x20000010
	...

08003b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <pxCurrentTCBConst2>)
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	6808      	ldr	r0, [r1, #0]
 8003b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8a:	f380 8809 	msr	PSP, r0
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f04f 0000 	mov.w	r0, #0
 8003b96:	f380 8811 	msr	BASEPRI, r0
 8003b9a:	4770      	bx	lr
 8003b9c:	f3af 8000 	nop.w

08003ba0 <pxCurrentTCBConst2>:
 8003ba0:	200000bc 	.word	0x200000bc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop

08003ba8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003ba8:	4808      	ldr	r0, [pc, #32]	; (8003bcc <prvPortStartFirstTask+0x24>)
 8003baa:	6800      	ldr	r0, [r0, #0]
 8003bac:	6800      	ldr	r0, [r0, #0]
 8003bae:	f380 8808 	msr	MSP, r0
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	f380 8814 	msr	CONTROL, r0
 8003bba:	b662      	cpsie	i
 8003bbc:	b661      	cpsie	f
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	df00      	svc	0
 8003bc8:	bf00      	nop
 8003bca:	0000      	.short	0x0000
 8003bcc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003bd0:	bf00      	nop
 8003bd2:	bf00      	nop

08003bd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003bda:	4b46      	ldr	r3, [pc, #280]	; (8003cf4 <xPortStartScheduler+0x120>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a46      	ldr	r2, [pc, #280]	; (8003cf8 <xPortStartScheduler+0x124>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d10a      	bne.n	8003bfa <xPortStartScheduler+0x26>
        __asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	613b      	str	r3, [r7, #16]
    }
 8003bf6:	bf00      	nop
 8003bf8:	e7fe      	b.n	8003bf8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003bfa:	4b3e      	ldr	r3, [pc, #248]	; (8003cf4 <xPortStartScheduler+0x120>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a3f      	ldr	r2, [pc, #252]	; (8003cfc <xPortStartScheduler+0x128>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d10a      	bne.n	8003c1a <xPortStartScheduler+0x46>
        __asm volatile
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	60fb      	str	r3, [r7, #12]
    }
 8003c16:	bf00      	nop
 8003c18:	e7fe      	b.n	8003c18 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c1a:	4b39      	ldr	r3, [pc, #228]	; (8003d00 <xPortStartScheduler+0x12c>)
 8003c1c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	22ff      	movs	r2, #255	; 0xff
 8003c2a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	4b31      	ldr	r3, [pc, #196]	; (8003d04 <xPortStartScheduler+0x130>)
 8003c40:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c42:	4b31      	ldr	r3, [pc, #196]	; (8003d08 <xPortStartScheduler+0x134>)
 8003c44:	2207      	movs	r2, #7
 8003c46:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c48:	e009      	b.n	8003c5e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003c4a:	4b2f      	ldr	r3, [pc, #188]	; (8003d08 <xPortStartScheduler+0x134>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	4a2d      	ldr	r2, [pc, #180]	; (8003d08 <xPortStartScheduler+0x134>)
 8003c52:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c5e:	78fb      	ldrb	r3, [r7, #3]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c66:	2b80      	cmp	r3, #128	; 0x80
 8003c68:	d0ef      	beq.n	8003c4a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c6a:	4b27      	ldr	r3, [pc, #156]	; (8003d08 <xPortStartScheduler+0x134>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f1c3 0307 	rsb	r3, r3, #7
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d00a      	beq.n	8003c8c <xPortStartScheduler+0xb8>
        __asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	60bb      	str	r3, [r7, #8]
    }
 8003c88:	bf00      	nop
 8003c8a:	e7fe      	b.n	8003c8a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c8c:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <xPortStartScheduler+0x134>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	4a1d      	ldr	r2, [pc, #116]	; (8003d08 <xPortStartScheduler+0x134>)
 8003c94:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c96:	4b1c      	ldr	r3, [pc, #112]	; (8003d08 <xPortStartScheduler+0x134>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c9e:	4a1a      	ldr	r2, [pc, #104]	; (8003d08 <xPortStartScheduler+0x134>)
 8003ca0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003caa:	4b18      	ldr	r3, [pc, #96]	; (8003d0c <xPortStartScheduler+0x138>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a17      	ldr	r2, [pc, #92]	; (8003d0c <xPortStartScheduler+0x138>)
 8003cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cb4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003cb6:	4b15      	ldr	r3, [pc, #84]	; (8003d0c <xPortStartScheduler+0x138>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a14      	ldr	r2, [pc, #80]	; (8003d0c <xPortStartScheduler+0x138>)
 8003cbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003cc0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003cc2:	f000 f963 	bl	8003f8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <xPortStartScheduler+0x13c>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003ccc:	f000 f982 	bl	8003fd4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003cd0:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <xPortStartScheduler+0x140>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a0f      	ldr	r2, [pc, #60]	; (8003d14 <xPortStartScheduler+0x140>)
 8003cd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003cda:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003cdc:	f7ff ff64 	bl	8003ba8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003ce0:	f7ff f8cc 	bl	8002e7c <vTaskSwitchContext>
    prvTaskExitError();
 8003ce4:	f7ff ff1a 	bl	8003b1c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	e000ed00 	.word	0xe000ed00
 8003cf8:	410fc271 	.word	0x410fc271
 8003cfc:	410fc270 	.word	0x410fc270
 8003d00:	e000e400 	.word	0xe000e400
 8003d04:	200001fc 	.word	0x200001fc
 8003d08:	20000200 	.word	0x20000200
 8003d0c:	e000ed20 	.word	0xe000ed20
 8003d10:	20000010 	.word	0x20000010
 8003d14:	e000ef34 	.word	0xe000ef34

08003d18 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d1e:	4b37      	ldr	r3, [pc, #220]	; (8003dfc <vInitPrioGroupValue+0xe4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a37      	ldr	r2, [pc, #220]	; (8003e00 <vInitPrioGroupValue+0xe8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d10a      	bne.n	8003d3e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2c:	f383 8811 	msr	BASEPRI, r3
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	613b      	str	r3, [r7, #16]
    }
 8003d3a:	bf00      	nop
 8003d3c:	e7fe      	b.n	8003d3c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d3e:	4b2f      	ldr	r3, [pc, #188]	; (8003dfc <vInitPrioGroupValue+0xe4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a30      	ldr	r2, [pc, #192]	; (8003e04 <vInitPrioGroupValue+0xec>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d10a      	bne.n	8003d5e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	60fb      	str	r3, [r7, #12]
    }
 8003d5a:	bf00      	nop
 8003d5c:	e7fe      	b.n	8003d5c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d5e:	4b2a      	ldr	r3, [pc, #168]	; (8003e08 <vInitPrioGroupValue+0xf0>)
 8003d60:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	22ff      	movs	r2, #255	; 0xff
 8003d6e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	4b22      	ldr	r3, [pc, #136]	; (8003e0c <vInitPrioGroupValue+0xf4>)
 8003d84:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d86:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <vInitPrioGroupValue+0xf8>)
 8003d88:	2207      	movs	r2, #7
 8003d8a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d8c:	e009      	b.n	8003da2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003d8e:	4b20      	ldr	r3, [pc, #128]	; (8003e10 <vInitPrioGroupValue+0xf8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	4a1e      	ldr	r2, [pc, #120]	; (8003e10 <vInitPrioGroupValue+0xf8>)
 8003d96:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003da2:	78fb      	ldrb	r3, [r7, #3]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	2b80      	cmp	r3, #128	; 0x80
 8003dac:	d0ef      	beq.n	8003d8e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003dae:	4b18      	ldr	r3, [pc, #96]	; (8003e10 <vInitPrioGroupValue+0xf8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f1c3 0307 	rsb	r3, r3, #7
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d00a      	beq.n	8003dd0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8003dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	60bb      	str	r3, [r7, #8]
    }
 8003dcc:	bf00      	nop
 8003dce:	e7fe      	b.n	8003dce <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <vInitPrioGroupValue+0xf8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	4a0e      	ldr	r2, [pc, #56]	; (8003e10 <vInitPrioGroupValue+0xf8>)
 8003dd8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003dda:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <vInitPrioGroupValue+0xf8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003de2:	4a0b      	ldr	r2, [pc, #44]	; (8003e10 <vInitPrioGroupValue+0xf8>)
 8003de4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	e000ed00 	.word	0xe000ed00
 8003e00:	410fc271 	.word	0x410fc271
 8003e04:	410fc270 	.word	0x410fc270
 8003e08:	e000e400 	.word	0xe000e400
 8003e0c:	200001fc 	.word	0x200001fc
 8003e10:	20000200 	.word	0x20000200

08003e14 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
        __asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	607b      	str	r3, [r7, #4]
    }
 8003e2c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003e2e:	4b0f      	ldr	r3, [pc, #60]	; (8003e6c <vPortEnterCritical+0x58>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3301      	adds	r3, #1
 8003e34:	4a0d      	ldr	r2, [pc, #52]	; (8003e6c <vPortEnterCritical+0x58>)
 8003e36:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003e38:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <vPortEnterCritical+0x58>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d10f      	bne.n	8003e60 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e40:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <vPortEnterCritical+0x5c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <vPortEnterCritical+0x4c>
        __asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	603b      	str	r3, [r7, #0]
    }
 8003e5c:	bf00      	nop
 8003e5e:	e7fe      	b.n	8003e5e <vPortEnterCritical+0x4a>
    }
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	20000010 	.word	0x20000010
 8003e70:	e000ed04 	.word	0xe000ed04

08003e74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003e7a:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <vPortExitCritical+0x50>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10a      	bne.n	8003e98 <vPortExitCritical+0x24>
        __asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	607b      	str	r3, [r7, #4]
    }
 8003e94:	bf00      	nop
 8003e96:	e7fe      	b.n	8003e96 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003e98:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <vPortExitCritical+0x50>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	4a09      	ldr	r2, [pc, #36]	; (8003ec4 <vPortExitCritical+0x50>)
 8003ea0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003ea2:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <vPortExitCritical+0x50>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d105      	bne.n	8003eb6 <vPortExitCritical+0x42>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003eb4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	20000010 	.word	0x20000010
	...

08003ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003ed0:	f3ef 8009 	mrs	r0, PSP
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <pxCurrentTCBConst>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	f01e 0f10 	tst.w	lr, #16
 8003ee0:	bf08      	it	eq
 8003ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eea:	6010      	str	r0, [r2, #0]
 8003eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ef4:	f380 8811 	msr	BASEPRI, r0
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f7fe ffbc 	bl	8002e7c <vTaskSwitchContext>
 8003f04:	f04f 0000 	mov.w	r0, #0
 8003f08:	f380 8811 	msr	BASEPRI, r0
 8003f0c:	bc09      	pop	{r0, r3}
 8003f0e:	6819      	ldr	r1, [r3, #0]
 8003f10:	6808      	ldr	r0, [r1, #0]
 8003f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f16:	f01e 0f10 	tst.w	lr, #16
 8003f1a:	bf08      	it	eq
 8003f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f20:	f380 8809 	msr	PSP, r0
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	f3af 8000 	nop.w

08003f30 <pxCurrentTCBConst>:
 8003f30:	200000bc 	.word	0x200000bc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop

08003f38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
        __asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	607b      	str	r3, [r7, #4]
    }
 8003f50:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8003f52:	f001 fcab 	bl	80058ac <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003f56:	f7fe fe77 	bl	8002c48 <xTaskIncrementTick>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d006      	beq.n	8003f6e <SysTick_Handler+0x36>
        {
        	traceISR_EXIT_TO_SCHEDULER();
 8003f60:	f001 fd02 	bl	8005968 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f64:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <SysTick_Handler+0x50>)
 8003f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	e001      	b.n	8003f72 <SysTick_Handler+0x3a>
        }
        else
        {
        	traceISR_EXIT();
 8003f6e:	f001 fcdf 	bl	8005930 <SEGGER_SYSVIEW_RecordExitISR>
 8003f72:	2300      	movs	r3, #0
 8003f74:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	f383 8811 	msr	BASEPRI, r3
    }
 8003f7c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	e000ed04 	.word	0xe000ed04

08003f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <vPortSetupTimerInterrupt+0x34>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f96:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <vPortSetupTimerInterrupt+0x38>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <vPortSetupTimerInterrupt+0x3c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a0a      	ldr	r2, [pc, #40]	; (8003fcc <vPortSetupTimerInterrupt+0x40>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	099b      	lsrs	r3, r3, #6
 8003fa8:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <vPortSetupTimerInterrupt+0x44>)
 8003faa:	3b01      	subs	r3, #1
 8003fac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003fae:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <vPortSetupTimerInterrupt+0x34>)
 8003fb0:	2207      	movs	r2, #7
 8003fb2:	601a      	str	r2, [r3, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	e000e010 	.word	0xe000e010
 8003fc4:	e000e018 	.word	0xe000e018
 8003fc8:	20000000 	.word	0x20000000
 8003fcc:	10624dd3 	.word	0x10624dd3
 8003fd0:	e000e014 	.word	0xe000e014

08003fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003fe4 <vPortEnableVFP+0x10>
 8003fd8:	6801      	ldr	r1, [r0, #0]
 8003fda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003fde:	6001      	str	r1, [r0, #0]
 8003fe0:	4770      	bx	lr
 8003fe2:	0000      	.short	0x0000
 8003fe4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop

08003fec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003ff2:	f3ef 8305 	mrs	r3, IPSR
 8003ff6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b0f      	cmp	r3, #15
 8003ffc:	d914      	bls.n	8004028 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003ffe:	4a17      	ldr	r2, [pc, #92]	; (800405c <vPortValidateInterruptPriority+0x70>)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004008:	4b15      	ldr	r3, [pc, #84]	; (8004060 <vPortValidateInterruptPriority+0x74>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	7afa      	ldrb	r2, [r7, #11]
 800400e:	429a      	cmp	r2, r3
 8004010:	d20a      	bcs.n	8004028 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	607b      	str	r3, [r7, #4]
    }
 8004024:	bf00      	nop
 8004026:	e7fe      	b.n	8004026 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004028:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <vPortValidateInterruptPriority+0x78>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004030:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <vPortValidateInterruptPriority+0x7c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d90a      	bls.n	800404e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	603b      	str	r3, [r7, #0]
    }
 800404a:	bf00      	nop
 800404c:	e7fe      	b.n	800404c <vPortValidateInterruptPriority+0x60>
    }
 800404e:	bf00      	nop
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	e000e3f0 	.word	0xe000e3f0
 8004060:	200001fc 	.word	0x200001fc
 8004064:	e000ed0c 	.word	0xe000ed0c
 8004068:	20000200 	.word	0x20000200

0800406c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08a      	sub	sp, #40	; 0x28
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004074:	2300      	movs	r3, #0
 8004076:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004078:	f7fe fcb6 	bl	80029e8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800407c:	4b53      	ldr	r3, [pc, #332]	; (80041cc <pvPortMalloc+0x160>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004084:	f000 f908 	bl	8004298 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d012      	beq.n	80040b4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800408e:	2208      	movs	r2, #8
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	3308      	adds	r3, #8
 800409a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	43db      	mvns	r3, r3
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d804      	bhi.n	80040b0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	4413      	add	r3, r2
 80040ac:	607b      	str	r3, [r7, #4]
 80040ae:	e001      	b.n	80040b4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	db70      	blt.n	800419c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d06d      	beq.n	800419c <pvPortMalloc+0x130>
 80040c0:	4b43      	ldr	r3, [pc, #268]	; (80041d0 <pvPortMalloc+0x164>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d868      	bhi.n	800419c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80040ca:	4b42      	ldr	r3, [pc, #264]	; (80041d4 <pvPortMalloc+0x168>)
 80040cc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80040ce:	4b41      	ldr	r3, [pc, #260]	; (80041d4 <pvPortMalloc+0x168>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040d4:	e004      	b.n	80040e0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d903      	bls.n	80040f2 <pvPortMalloc+0x86>
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f1      	bne.n	80040d6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80040f2:	4b36      	ldr	r3, [pc, #216]	; (80041cc <pvPortMalloc+0x160>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d04f      	beq.n	800419c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2208      	movs	r2, #8
 8004102:	4413      	add	r3, r2
 8004104:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	1ad2      	subs	r2, r2, r3
 8004116:	2308      	movs	r3, #8
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	429a      	cmp	r2, r3
 800411c:	d91f      	bls.n	800415e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800411e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4413      	add	r3, r2
 8004124:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <pvPortMalloc+0xda>
        __asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	613b      	str	r3, [r7, #16]
    }
 8004142:	bf00      	nop
 8004144:	e7fe      	b.n	8004144 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	1ad2      	subs	r2, r2, r3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004158:	6978      	ldr	r0, [r7, #20]
 800415a:	f000 f8f9 	bl	8004350 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800415e:	4b1c      	ldr	r3, [pc, #112]	; (80041d0 <pvPortMalloc+0x164>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	4a19      	ldr	r2, [pc, #100]	; (80041d0 <pvPortMalloc+0x164>)
 800416a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800416c:	4b18      	ldr	r3, [pc, #96]	; (80041d0 <pvPortMalloc+0x164>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <pvPortMalloc+0x16c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d203      	bcs.n	8004180 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004178:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <pvPortMalloc+0x164>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a16      	ldr	r2, [pc, #88]	; (80041d8 <pvPortMalloc+0x16c>)
 800417e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004192:	4b12      	ldr	r3, [pc, #72]	; (80041dc <pvPortMalloc+0x170>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3301      	adds	r3, #1
 8004198:	4a10      	ldr	r2, [pc, #64]	; (80041dc <pvPortMalloc+0x170>)
 800419a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800419c:	f7fe fc32 	bl	8002a04 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <pvPortMalloc+0x154>
        __asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	60fb      	str	r3, [r7, #12]
    }
 80041bc:	bf00      	nop
 80041be:	e7fe      	b.n	80041be <pvPortMalloc+0x152>
    return pvReturn;
 80041c0:	69fb      	ldr	r3, [r7, #28]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3728      	adds	r7, #40	; 0x28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20012e0c 	.word	0x20012e0c
 80041d0:	20012e10 	.word	0x20012e10
 80041d4:	20012e04 	.word	0x20012e04
 80041d8:	20012e14 	.word	0x20012e14
 80041dc:	20012e18 	.word	0x20012e18

080041e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d049      	beq.n	8004286 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80041f2:	2308      	movs	r3, #8
 80041f4:	425b      	negs	r3, r3
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4413      	add	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	db0a      	blt.n	800421e <vPortFree+0x3e>
        __asm volatile
 8004208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	60fb      	str	r3, [r7, #12]
    }
 800421a:	bf00      	nop
 800421c:	e7fe      	b.n	800421c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <vPortFree+0x5c>
        __asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	60bb      	str	r3, [r7, #8]
    }
 8004238:	bf00      	nop
 800423a:	e7fe      	b.n	800423a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	0fdb      	lsrs	r3, r3, #31
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01c      	beq.n	8004286 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d118      	bne.n	8004286 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004260:	f7fe fbc2 	bl	80029e8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	4b09      	ldr	r3, [pc, #36]	; (8004290 <vPortFree+0xb0>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4413      	add	r3, r2
 800426e:	4a08      	ldr	r2, [pc, #32]	; (8004290 <vPortFree+0xb0>)
 8004270:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004272:	6938      	ldr	r0, [r7, #16]
 8004274:	f000 f86c 	bl	8004350 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004278:	4b06      	ldr	r3, [pc, #24]	; (8004294 <vPortFree+0xb4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3301      	adds	r3, #1
 800427e:	4a05      	ldr	r2, [pc, #20]	; (8004294 <vPortFree+0xb4>)
 8004280:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004282:	f7fe fbbf 	bl	8002a04 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004286:	bf00      	nop
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20012e10 	.word	0x20012e10
 8004294:	20012e1c 	.word	0x20012e1c

08004298 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800429e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80042a2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80042a4:	4b25      	ldr	r3, [pc, #148]	; (800433c <prvHeapInit+0xa4>)
 80042a6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00c      	beq.n	80042cc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3307      	adds	r3, #7
 80042b6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0307 	bic.w	r3, r3, #7
 80042be:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	4a1d      	ldr	r2, [pc, #116]	; (800433c <prvHeapInit+0xa4>)
 80042c8:	4413      	add	r3, r2
 80042ca:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042d0:	4a1b      	ldr	r2, [pc, #108]	; (8004340 <prvHeapInit+0xa8>)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80042d6:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <prvHeapInit+0xa8>)
 80042d8:	2200      	movs	r2, #0
 80042da:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	4413      	add	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80042e4:	2208      	movs	r2, #8
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	1a9b      	subs	r3, r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0307 	bic.w	r3, r3, #7
 80042f2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4a13      	ldr	r2, [pc, #76]	; (8004344 <prvHeapInit+0xac>)
 80042f8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80042fa:	4b12      	ldr	r3, [pc, #72]	; (8004344 <prvHeapInit+0xac>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2200      	movs	r2, #0
 8004300:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004302:	4b10      	ldr	r3, [pc, #64]	; (8004344 <prvHeapInit+0xac>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	1ad2      	subs	r2, r2, r3
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004318:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <prvHeapInit+0xac>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	4a08      	ldr	r2, [pc, #32]	; (8004348 <prvHeapInit+0xb0>)
 8004326:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	4a07      	ldr	r2, [pc, #28]	; (800434c <prvHeapInit+0xb4>)
 800432e:	6013      	str	r3, [r2, #0]
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	20000204 	.word	0x20000204
 8004340:	20012e04 	.word	0x20012e04
 8004344:	20012e0c 	.word	0x20012e0c
 8004348:	20012e14 	.word	0x20012e14
 800434c:	20012e10 	.word	0x20012e10

08004350 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004358:	4b28      	ldr	r3, [pc, #160]	; (80043fc <prvInsertBlockIntoFreeList+0xac>)
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	e002      	b.n	8004364 <prvInsertBlockIntoFreeList+0x14>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	429a      	cmp	r2, r3
 800436c:	d8f7      	bhi.n	800435e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	4413      	add	r3, r2
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	429a      	cmp	r2, r3
 800437e:	d108      	bne.n	8004392 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	441a      	add	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	441a      	add	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d118      	bne.n	80043d8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	4b15      	ldr	r3, [pc, #84]	; (8004400 <prvInsertBlockIntoFreeList+0xb0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d00d      	beq.n	80043ce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	441a      	add	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	e008      	b.n	80043e0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043ce:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <prvInsertBlockIntoFreeList+0xb0>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e003      	b.n	80043e0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d002      	beq.n	80043ee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80043ee:	bf00      	nop
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20012e04 	.word	0x20012e04
 8004400:	20012e0c 	.word	0x20012e0c

08004404 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004408:	4803      	ldr	r0, [pc, #12]	; (8004418 <_cbSendSystemDesc+0x14>)
 800440a:	f001 f9f9 	bl	8005800 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800440e:	4803      	ldr	r0, [pc, #12]	; (800441c <_cbSendSystemDesc+0x18>)
 8004410:	f001 f9f6 	bl	8005800 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004414:	bf00      	nop
 8004416:	bd80      	pop	{r7, pc}
 8004418:	08006060 	.word	0x08006060
 800441c:	08006090 	.word	0x08006090

08004420 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004424:	4b06      	ldr	r3, [pc, #24]	; (8004440 <SEGGER_SYSVIEW_Conf+0x20>)
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <SEGGER_SYSVIEW_Conf+0x20>)
 800442a:	6819      	ldr	r1, [r3, #0]
 800442c:	4b05      	ldr	r3, [pc, #20]	; (8004444 <SEGGER_SYSVIEW_Conf+0x24>)
 800442e:	4a06      	ldr	r2, [pc, #24]	; (8004448 <SEGGER_SYSVIEW_Conf+0x28>)
 8004430:	f000 fd62 	bl	8004ef8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004434:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004438:	f000 fda2 	bl	8004f80 <SEGGER_SYSVIEW_SetRAMBase>
}
 800443c:	bf00      	nop
 800443e:	bd80      	pop	{r7, pc}
 8004440:	20000000 	.word	0x20000000
 8004444:	08004405 	.word	0x08004405
 8004448:	0800612c 	.word	0x0800612c

0800444c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800444c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800444e:	b085      	sub	sp, #20
 8004450:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004452:	2300      	movs	r3, #0
 8004454:	607b      	str	r3, [r7, #4]
 8004456:	e033      	b.n	80044c0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004458:	491e      	ldr	r1, [pc, #120]	; (80044d4 <_cbSendTaskList+0x88>)
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	491a      	ldr	r1, [pc, #104]	; (80044d4 <_cbSendTaskList+0x88>)
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	3304      	adds	r3, #4
 8004478:	6819      	ldr	r1, [r3, #0]
 800447a:	4c16      	ldr	r4, [pc, #88]	; (80044d4 <_cbSendTaskList+0x88>)
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4423      	add	r3, r4
 8004488:	3308      	adds	r3, #8
 800448a:	681c      	ldr	r4, [r3, #0]
 800448c:	4d11      	ldr	r5, [pc, #68]	; (80044d4 <_cbSendTaskList+0x88>)
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	442b      	add	r3, r5
 800449a:	330c      	adds	r3, #12
 800449c:	681d      	ldr	r5, [r3, #0]
 800449e:	4e0d      	ldr	r6, [pc, #52]	; (80044d4 <_cbSendTaskList+0x88>)
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4433      	add	r3, r6
 80044ac:	3310      	adds	r3, #16
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	462b      	mov	r3, r5
 80044b4:	4622      	mov	r2, r4
 80044b6:	f000 f8bd 	bl	8004634 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3301      	adds	r3, #1
 80044be:	607b      	str	r3, [r7, #4]
 80044c0:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <_cbSendTaskList+0x8c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d3c6      	bcc.n	8004458 <_cbSendTaskList+0xc>
  }
}
 80044ca:	bf00      	nop
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044d4:	20012e20 	.word	0x20012e20
 80044d8:	20012ec0 	.word	0x20012ec0

080044dc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80044dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80044e4:	f7fe fb9e 	bl	8002c24 <xTaskGetTickCountFromISR>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2200      	movs	r2, #0
 80044ec:	469a      	mov	sl, r3
 80044ee:	4693      	mov	fp, r2
 80044f0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80044f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	f04f 0a00 	mov.w	sl, #0
 8004500:	f04f 0b00 	mov.w	fp, #0
 8004504:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004508:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800450c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004510:	4652      	mov	r2, sl
 8004512:	465b      	mov	r3, fp
 8004514:	1a14      	subs	r4, r2, r0
 8004516:	eb63 0501 	sbc.w	r5, r3, r1
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	00ab      	lsls	r3, r5, #2
 8004524:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004528:	00a2      	lsls	r2, r4, #2
 800452a:	4614      	mov	r4, r2
 800452c:	461d      	mov	r5, r3
 800452e:	eb14 0800 	adds.w	r8, r4, r0
 8004532:	eb45 0901 	adc.w	r9, r5, r1
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	f04f 0300 	mov.w	r3, #0
 800453e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004542:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004546:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800454a:	4690      	mov	r8, r2
 800454c:	4699      	mov	r9, r3
 800454e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004552:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004556:	4610      	mov	r0, r2
 8004558:	4619      	mov	r1, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004564 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af02      	add	r7, sp, #8
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004572:	2205      	movs	r2, #5
 8004574:	492b      	ldr	r1, [pc, #172]	; (8004624 <SYSVIEW_AddTask+0xc0>)
 8004576:	68b8      	ldr	r0, [r7, #8]
 8004578:	f001 fd24 	bl	8005fc4 <memcmp>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d04b      	beq.n	800461a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004582:	4b29      	ldr	r3, [pc, #164]	; (8004628 <SYSVIEW_AddTask+0xc4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b07      	cmp	r3, #7
 8004588:	d903      	bls.n	8004592 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800458a:	4828      	ldr	r0, [pc, #160]	; (800462c <SYSVIEW_AddTask+0xc8>)
 800458c:	f001 fc40 	bl	8005e10 <SEGGER_SYSVIEW_Warn>
    return;
 8004590:	e044      	b.n	800461c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004592:	4b25      	ldr	r3, [pc, #148]	; (8004628 <SYSVIEW_AddTask+0xc4>)
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	4926      	ldr	r1, [pc, #152]	; (8004630 <SYSVIEW_AddTask+0xcc>)
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80045a6:	4b20      	ldr	r3, [pc, #128]	; (8004628 <SYSVIEW_AddTask+0xc4>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4921      	ldr	r1, [pc, #132]	; (8004630 <SYSVIEW_AddTask+0xcc>)
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	3304      	adds	r3, #4
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80045bc:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <SYSVIEW_AddTask+0xc4>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	491b      	ldr	r1, [pc, #108]	; (8004630 <SYSVIEW_AddTask+0xcc>)
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	3308      	adds	r3, #8
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80045d2:	4b15      	ldr	r3, [pc, #84]	; (8004628 <SYSVIEW_AddTask+0xc4>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	4916      	ldr	r1, [pc, #88]	; (8004630 <SYSVIEW_AddTask+0xcc>)
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	330c      	adds	r3, #12
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80045e8:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <SYSVIEW_AddTask+0xc4>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	4910      	ldr	r1, [pc, #64]	; (8004630 <SYSVIEW_AddTask+0xcc>)
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	440b      	add	r3, r1
 80045f8:	3310      	adds	r3, #16
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80045fe:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <SYSVIEW_AddTask+0xc4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3301      	adds	r3, #1
 8004604:	4a08      	ldr	r2, [pc, #32]	; (8004628 <SYSVIEW_AddTask+0xc4>)
 8004606:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f80e 	bl	8004634 <SYSVIEW_SendTaskInfo>
 8004618:	e000      	b.n	800461c <SYSVIEW_AddTask+0xb8>
    return;
 800461a:	bf00      	nop

}
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	080060a0 	.word	0x080060a0
 8004628:	20012ec0 	.word	0x20012ec0
 800462c:	080060a8 	.word	0x080060a8
 8004630:	20012e20 	.word	0x20012e20

08004634 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004634:	b580      	push	{r7, lr}
 8004636:	b08a      	sub	sp, #40	; 0x28
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004642:	f107 0314 	add.w	r3, r7, #20
 8004646:	2214      	movs	r2, #20
 8004648:	2100      	movs	r1, #0
 800464a:	4618      	mov	r0, r3
 800464c:	f001 fcd8 	bl	8006000 <memset>
  TaskInfo.TaskID     = TaskID;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004664:	f107 0314 	add.w	r3, r7, #20
 8004668:	4618      	mov	r0, r3
 800466a:	f000 ffd1 	bl	8005610 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800466e:	bf00      	nop
 8004670:	3728      	adds	r7, #40	; 0x28
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800467e:	4b26      	ldr	r3, [pc, #152]	; (8004718 <_DoInit+0xa0>)
 8004680:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004682:	22a8      	movs	r2, #168	; 0xa8
 8004684:	2100      	movs	r1, #0
 8004686:	6838      	ldr	r0, [r7, #0]
 8004688:	f001 fcba 	bl	8006000 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2203      	movs	r2, #3
 8004690:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2203      	movs	r2, #3
 8004696:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	4a20      	ldr	r2, [pc, #128]	; (800471c <_DoInit+0xa4>)
 800469c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	4a1f      	ldr	r2, [pc, #124]	; (8004720 <_DoInit+0xa8>)
 80046a2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046aa:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2200      	movs	r2, #0
 80046b0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2200      	movs	r2, #0
 80046b6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2200      	movs	r2, #0
 80046bc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	4a16      	ldr	r2, [pc, #88]	; (800471c <_DoInit+0xa4>)
 80046c2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	4a17      	ldr	r2, [pc, #92]	; (8004724 <_DoInit+0xac>)
 80046c8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2210      	movs	r2, #16
 80046ce:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2200      	movs	r2, #0
 80046d4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2200      	movs	r2, #0
 80046da:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2200      	movs	r2, #0
 80046e0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80046e2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80046e6:	2300      	movs	r3, #0
 80046e8:	607b      	str	r3, [r7, #4]
 80046ea:	e00c      	b.n	8004706 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f1c3 030f 	rsb	r3, r3, #15
 80046f2:	4a0d      	ldr	r2, [pc, #52]	; (8004728 <_DoInit+0xb0>)
 80046f4:	5cd1      	ldrb	r1, [r2, r3]
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4413      	add	r3, r2
 80046fc:	460a      	mov	r2, r1
 80046fe:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3301      	adds	r3, #1
 8004704:	607b      	str	r3, [r7, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b0f      	cmp	r3, #15
 800470a:	d9ef      	bls.n	80046ec <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800470c:	f3bf 8f5f 	dmb	sy
}
 8004710:	bf00      	nop
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20012ec4 	.word	0x20012ec4
 800471c:	080060f8 	.word	0x080060f8
 8004720:	20012f6c 	.word	0x20012f6c
 8004724:	2001336c 	.word	0x2001336c
 8004728:	08006134 	.word	0x08006134

0800472c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800472c:	b580      	push	{r7, lr}
 800472e:	b08c      	sub	sp, #48	; 0x30
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004738:	4b3e      	ldr	r3, [pc, #248]	; (8004834 <SEGGER_RTT_ReadNoLock+0x108>)
 800473a:	623b      	str	r3, [r7, #32]
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <SEGGER_RTT_ReadNoLock+0x1e>
 8004746:	f7ff ff97 	bl	8004678 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4613      	mov	r3, r2
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	4413      	add	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	3360      	adds	r3, #96	; 0x60
 8004756:	4a37      	ldr	r2, [pc, #220]	; (8004834 <SEGGER_RTT_ReadNoLock+0x108>)
 8004758:	4413      	add	r3, r2
 800475a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800476c:	2300      	movs	r3, #0
 800476e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	429a      	cmp	r2, r3
 8004776:	d92b      	bls.n	80047d0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4293      	cmp	r3, r2
 8004788:	bf28      	it	cs
 800478a:	4613      	movcs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004794:	4413      	add	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	6939      	ldr	r1, [r7, #16]
 800479c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800479e:	f001 fc21 	bl	8005fe4 <memcpy>
    NumBytesRead += NumBytesRem;
 80047a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	4413      	add	r3, r2
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80047aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	4413      	add	r3, r2
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80047ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	4413      	add	r3, r2
 80047c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d101      	bne.n	80047d0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80047cc:	2300      	movs	r3, #0
 80047ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4293      	cmp	r3, r2
 80047de:	bf28      	it	cs
 80047e0:	4613      	movcs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d019      	beq.n	800481e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f0:	4413      	add	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	6939      	ldr	r1, [r7, #16]
 80047f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047fa:	f001 fbf3 	bl	8005fe4 <memcpy>
    NumBytesRead += NumBytesRem;
 80047fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4413      	add	r3, r2
 8004804:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	4413      	add	r3, r2
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	4413      	add	r3, r2
 800481c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004828:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800482c:	4618      	mov	r0, r3
 800482e:	3730      	adds	r7, #48	; 0x30
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20012ec4 	.word	0x20012ec4

08004838 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004846:	4b3d      	ldr	r3, [pc, #244]	; (800493c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004854:	f7ff ff10 	bl	8004678 <_DoInit>
  SEGGER_RTT_LOCK();
 8004858:	f3ef 8311 	mrs	r3, BASEPRI
 800485c:	f04f 0120 	mov.w	r1, #32
 8004860:	f381 8811 	msr	BASEPRI, r1
 8004864:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004866:	4b35      	ldr	r3, [pc, #212]	; (800493c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004868:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800486e:	6939      	ldr	r1, [r7, #16]
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	4613      	mov	r3, r2
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	4413      	add	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	440b      	add	r3, r1
 800487e:	3304      	adds	r3, #4
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d008      	beq.n	8004898 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	3301      	adds	r3, #1
 800488a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	429a      	cmp	r2, r3
 8004894:	dbeb      	blt.n	800486e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004896:	e000      	b.n	800489a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004898:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	da3f      	bge.n	8004924 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80048a4:	6939      	ldr	r1, [r7, #16]
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	4613      	mov	r3, r2
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	4413      	add	r3, r2
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	440b      	add	r3, r1
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80048b8:	6939      	ldr	r1, [r7, #16]
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	4613      	mov	r3, r2
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	4413      	add	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	440b      	add	r3, r1
 80048c8:	3304      	adds	r3, #4
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80048ce:	6939      	ldr	r1, [r7, #16]
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	4613      	mov	r3, r2
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	4413      	add	r3, r2
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	440b      	add	r3, r1
 80048dc:	3320      	adds	r3, #32
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80048e2:	6939      	ldr	r1, [r7, #16]
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	4613      	mov	r3, r2
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	4413      	add	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	440b      	add	r3, r1
 80048f0:	3328      	adds	r3, #40	; 0x28
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80048f6:	6939      	ldr	r1, [r7, #16]
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	4613      	mov	r3, r2
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	4413      	add	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	440b      	add	r3, r1
 8004904:	3324      	adds	r3, #36	; 0x24
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800490a:	6939      	ldr	r1, [r7, #16]
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	4613      	mov	r3, r2
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	4413      	add	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	440b      	add	r3, r1
 8004918:	332c      	adds	r3, #44	; 0x2c
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800491e:	f3bf 8f5f 	dmb	sy
 8004922:	e002      	b.n	800492a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004928:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004930:	69fb      	ldr	r3, [r7, #28]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20012ec4 	.word	0x20012ec4

08004940 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	; 0x28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800494e:	4b21      	ldr	r3, [pc, #132]	; (80049d4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004950:	623b      	str	r3, [r7, #32]
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800495c:	f7ff fe8c 	bl	8004678 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004960:	4b1c      	ldr	r3, [pc, #112]	; (80049d4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004962:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d82c      	bhi.n	80049c4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800496a:	f3ef 8311 	mrs	r3, BASEPRI
 800496e:	f04f 0120 	mov.w	r1, #32
 8004972:	f381 8811 	msr	BASEPRI, r1
 8004976:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4613      	mov	r3, r2
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	4413      	add	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	3360      	adds	r3, #96	; 0x60
 8004984:	69fa      	ldr	r2, [r7, #28]
 8004986:	4413      	add	r3, r2
 8004988:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00e      	beq.n	80049ae <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2200      	movs	r2, #0
 80049a6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2200      	movs	r2, #0
 80049ac:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80049b4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80049be:	2300      	movs	r3, #0
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
 80049c2:	e002      	b.n	80049ca <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80049c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3728      	adds	r7, #40	; 0x28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20012ec4 	.word	0x20012ec4

080049d8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	60fa      	str	r2, [r7, #12]
 80049ee:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b80      	cmp	r3, #128	; 0x80
 80049f4:	d90a      	bls.n	8004a0c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80049fa:	e007      	b.n	8004a0c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	1c53      	adds	r3, r2, #1
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1c59      	adds	r1, r3, #1
 8004a06:	60f9      	str	r1, [r7, #12]
 8004a08:	7812      	ldrb	r2, [r2, #0]
 8004a0a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	1e5a      	subs	r2, r3, #1
 8004a10:	607a      	str	r2, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <_EncodeStr+0x46>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1ee      	bne.n	80049fc <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3307      	adds	r3, #7
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004a56:	4b35      	ldr	r3, [pc, #212]	; (8004b2c <_HandleIncomingPacket+0xdc>)
 8004a58:	7e1b      	ldrb	r3, [r3, #24]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	1cfb      	adds	r3, r7, #3
 8004a5e:	2201      	movs	r2, #1
 8004a60:	4619      	mov	r1, r3
 8004a62:	f7ff fe63 	bl	800472c <SEGGER_RTT_ReadNoLock>
 8004a66:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d052      	beq.n	8004b14 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	2b80      	cmp	r3, #128	; 0x80
 8004a72:	d031      	beq.n	8004ad8 <_HandleIncomingPacket+0x88>
 8004a74:	2b80      	cmp	r3, #128	; 0x80
 8004a76:	dc40      	bgt.n	8004afa <_HandleIncomingPacket+0xaa>
 8004a78:	2b07      	cmp	r3, #7
 8004a7a:	dc15      	bgt.n	8004aa8 <_HandleIncomingPacket+0x58>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	dd3c      	ble.n	8004afa <_HandleIncomingPacket+0xaa>
 8004a80:	3b01      	subs	r3, #1
 8004a82:	2b06      	cmp	r3, #6
 8004a84:	d839      	bhi.n	8004afa <_HandleIncomingPacket+0xaa>
 8004a86:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <_HandleIncomingPacket+0x3c>)
 8004a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8c:	08004aaf 	.word	0x08004aaf
 8004a90:	08004ab5 	.word	0x08004ab5
 8004a94:	08004abb 	.word	0x08004abb
 8004a98:	08004ac1 	.word	0x08004ac1
 8004a9c:	08004ac7 	.word	0x08004ac7
 8004aa0:	08004acd 	.word	0x08004acd
 8004aa4:	08004ad3 	.word	0x08004ad3
 8004aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8004aaa:	d035      	beq.n	8004b18 <_HandleIncomingPacket+0xc8>
 8004aac:	e025      	b.n	8004afa <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004aae:	f000 fc33 	bl	8005318 <SEGGER_SYSVIEW_Start>
      break;
 8004ab2:	e036      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004ab4:	f000 fcec 	bl	8005490 <SEGGER_SYSVIEW_Stop>
      break;
 8004ab8:	e033      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004aba:	f000 fec5 	bl	8005848 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004abe:	e030      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004ac0:	f000 fe8a 	bl	80057d8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004ac4:	e02d      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004ac6:	f000 fd09 	bl	80054dc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004aca:	e02a      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004acc:	f001 f962 	bl	8005d94 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004ad0:	e027      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004ad2:	f001 f941 	bl	8005d58 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004ad6:	e024      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004ad8:	4b14      	ldr	r3, [pc, #80]	; (8004b2c <_HandleIncomingPacket+0xdc>)
 8004ada:	7e1b      	ldrb	r3, [r3, #24]
 8004adc:	4618      	mov	r0, r3
 8004ade:	1cfb      	adds	r3, r7, #3
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	f7ff fe22 	bl	800472c <SEGGER_RTT_ReadNoLock>
 8004ae8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d015      	beq.n	8004b1c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f001 f8a6 	bl	8005c44 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004af8:	e010      	b.n	8004b1c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	b25b      	sxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	da0e      	bge.n	8004b20 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004b02:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <_HandleIncomingPacket+0xdc>)
 8004b04:	7e1b      	ldrb	r3, [r3, #24]
 8004b06:	4618      	mov	r0, r3
 8004b08:	1cfb      	adds	r3, r7, #3
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	f7ff fe0d 	bl	800472c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004b12:	e005      	b.n	8004b20 <_HandleIncomingPacket+0xd0>
    }
  }
 8004b14:	bf00      	nop
 8004b16:	e004      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
      break;
 8004b18:	bf00      	nop
 8004b1a:	e002      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
      break;
 8004b1c:	bf00      	nop
 8004b1e:	e000      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
      break;
 8004b20:	bf00      	nop
}
 8004b22:	bf00      	nop
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20014384 	.word	0x20014384

08004b30 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08c      	sub	sp, #48	; 0x30
 8004b34:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004b36:	2301      	movs	r3, #1
 8004b38:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b44:	4b32      	ldr	r3, [pc, #200]	; (8004c10 <_TrySendOverflowPacket+0xe0>)
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b4a:	e00b      	b.n	8004b64 <_TrySendOverflowPacket+0x34>
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b52:	1c59      	adds	r1, r3, #1
 8004b54:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	09db      	lsrs	r3, r3, #7
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	2b7f      	cmp	r3, #127	; 0x7f
 8004b68:	d8f0      	bhi.n	8004b4c <_TrySendOverflowPacket+0x1c>
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b7a:	4b26      	ldr	r3, [pc, #152]	; (8004c14 <_TrySendOverflowPacket+0xe4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004b80:	4b23      	ldr	r3, [pc, #140]	; (8004c10 <_TrySendOverflowPacket+0xe0>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	623b      	str	r3, [r7, #32]
 8004b92:	e00b      	b.n	8004bac <_TrySendOverflowPacket+0x7c>
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	1c59      	adds	r1, r3, #1
 8004b9c:	6279      	str	r1, [r7, #36]	; 0x24
 8004b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	09db      	lsrs	r3, r3, #7
 8004baa:	623b      	str	r3, [r7, #32]
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	2b7f      	cmp	r3, #127	; 0x7f
 8004bb0:	d8f0      	bhi.n	8004b94 <_TrySendOverflowPacket+0x64>
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	627a      	str	r2, [r7, #36]	; 0x24
 8004bb8:	6a3a      	ldr	r2, [r7, #32]
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004bc2:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <_TrySendOverflowPacket+0xe0>)
 8004bc4:	785b      	ldrb	r3, [r3, #1]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	1d3b      	adds	r3, r7, #4
 8004bca:	69fa      	ldr	r2, [r7, #28]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	461a      	mov	r2, r3
 8004bd0:	1d3b      	adds	r3, r7, #4
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	f7fb fafc 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004bdc:	f001 f9be 	bl	8005f5c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d009      	beq.n	8004bfa <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004be6:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <_TrySendOverflowPacket+0xe0>)
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004bec:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <_TrySendOverflowPacket+0xe0>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <_TrySendOverflowPacket+0xe0>)
 8004bf6:	701a      	strb	r2, [r3, #0]
 8004bf8:	e004      	b.n	8004c04 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004bfa:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <_TrySendOverflowPacket+0xe0>)
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	4a03      	ldr	r2, [pc, #12]	; (8004c10 <_TrySendOverflowPacket+0xe0>)
 8004c02:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004c04:	693b      	ldr	r3, [r7, #16]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3730      	adds	r7, #48	; 0x30
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20014384 	.word	0x20014384
 8004c14:	e0001004 	.word	0xe0001004

08004c18 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08a      	sub	sp, #40	; 0x28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004c24:	4b96      	ldr	r3, [pc, #600]	; (8004e80 <_SendPacket+0x268>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d010      	beq.n	8004c4e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004c2c:	4b94      	ldr	r3, [pc, #592]	; (8004e80 <_SendPacket+0x268>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 8130 	beq.w	8004e96 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004c36:	4b92      	ldr	r3, [pc, #584]	; (8004e80 <_SendPacket+0x268>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d109      	bne.n	8004c52 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004c3e:	f7ff ff77 	bl	8004b30 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004c42:	4b8f      	ldr	r3, [pc, #572]	; (8004e80 <_SendPacket+0x268>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	f040 8127 	bne.w	8004e9a <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8004c4c:	e001      	b.n	8004c52 <_SendPacket+0x3a>
    goto Send;
 8004c4e:	bf00      	nop
 8004c50:	e000      	b.n	8004c54 <_SendPacket+0x3c>
Send:
 8004c52:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b1f      	cmp	r3, #31
 8004c58:	d809      	bhi.n	8004c6e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004c5a:	4b89      	ldr	r3, [pc, #548]	; (8004e80 <_SendPacket+0x268>)
 8004c5c:	69da      	ldr	r2, [r3, #28]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f040 8118 	bne.w	8004e9e <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b17      	cmp	r3, #23
 8004c72:	d807      	bhi.n	8004c84 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	701a      	strb	r2, [r3, #0]
 8004c82:	e0c4      	b.n	8004e0e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c90:	d912      	bls.n	8004cb8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	09da      	lsrs	r2, r3, #7
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	3a01      	subs	r2, #1
 8004caa:	60fa      	str	r2, [r7, #12]
 8004cac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	e006      	b.n	8004cc6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b7e      	cmp	r3, #126	; 0x7e
 8004cca:	d807      	bhi.n	8004cdc <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	701a      	strb	r2, [r3, #0]
 8004cda:	e098      	b.n	8004e0e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ce2:	d212      	bcs.n	8004d0a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	09da      	lsrs	r2, r3, #7
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	3a01      	subs	r2, #1
 8004cfc:	60fa      	str	r2, [r7, #12]
 8004cfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e081      	b.n	8004e0e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d10:	d21d      	bcs.n	8004d4e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	0b9a      	lsrs	r2, r3, #14
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	09db      	lsrs	r3, r3, #7
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	3a01      	subs	r2, #1
 8004d2c:	60fa      	str	r2, [r7, #12]
 8004d2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	3a01      	subs	r2, #1
 8004d40:	60fa      	str	r2, [r7, #12]
 8004d42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	701a      	strb	r2, [r3, #0]
 8004d4c:	e05f      	b.n	8004e0e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d54:	d228      	bcs.n	8004da8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	0d5a      	lsrs	r2, r3, #21
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	0b9b      	lsrs	r3, r3, #14
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	3a01      	subs	r2, #1
 8004d70:	60fa      	str	r2, [r7, #12]
 8004d72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	09db      	lsrs	r3, r3, #7
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	3a01      	subs	r2, #1
 8004d86:	60fa      	str	r2, [r7, #12]
 8004d88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	3a01      	subs	r2, #1
 8004d9a:	60fa      	str	r2, [r7, #12]
 8004d9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	e032      	b.n	8004e0e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	0f1a      	lsrs	r2, r3, #28
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	0d5b      	lsrs	r3, r3, #21
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	3a01      	subs	r2, #1
 8004dc2:	60fa      	str	r2, [r7, #12]
 8004dc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	0b9b      	lsrs	r3, r3, #14
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	3a01      	subs	r2, #1
 8004dd8:	60fa      	str	r2, [r7, #12]
 8004dda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	09db      	lsrs	r3, r3, #7
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	3a01      	subs	r2, #1
 8004dee:	60fa      	str	r2, [r7, #12]
 8004df0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	3a01      	subs	r2, #1
 8004e02:	60fa      	str	r2, [r7, #12]
 8004e04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e0e:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <_SendPacket+0x26c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004e14:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <_SendPacket+0x268>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	623b      	str	r3, [r7, #32]
 8004e26:	e00b      	b.n	8004e40 <_SendPacket+0x228>
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	1c59      	adds	r1, r3, #1
 8004e30:	6279      	str	r1, [r7, #36]	; 0x24
 8004e32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	09db      	lsrs	r3, r3, #7
 8004e3e:	623b      	str	r3, [r7, #32]
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	2b7f      	cmp	r3, #127	; 0x7f
 8004e44:	d8f0      	bhi.n	8004e28 <_SendPacket+0x210>
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	627a      	str	r2, [r7, #36]	; 0x24
 8004e4c:	6a3a      	ldr	r2, [r7, #32]
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <_SendPacket+0x268>)
 8004e58:	785b      	ldrb	r3, [r3, #1]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	68f9      	ldr	r1, [r7, #12]
 8004e66:	f7fb f9b3 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004e6a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004e6c:	f001 f876 	bl	8005f5c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d008      	beq.n	8004e88 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004e76:	4a02      	ldr	r2, [pc, #8]	; (8004e80 <_SendPacket+0x268>)
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	60d3      	str	r3, [r2, #12]
 8004e7c:	e010      	b.n	8004ea0 <_SendPacket+0x288>
 8004e7e:	bf00      	nop
 8004e80:	20014384 	.word	0x20014384
 8004e84:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004e88:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <_SendPacket+0x2d8>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	4b17      	ldr	r3, [pc, #92]	; (8004ef0 <_SendPacket+0x2d8>)
 8004e92:	701a      	strb	r2, [r3, #0]
 8004e94:	e004      	b.n	8004ea0 <_SendPacket+0x288>
    goto SendDone;
 8004e96:	bf00      	nop
 8004e98:	e002      	b.n	8004ea0 <_SendPacket+0x288>
      goto SendDone;
 8004e9a:	bf00      	nop
 8004e9c:	e000      	b.n	8004ea0 <_SendPacket+0x288>
      goto SendDone;
 8004e9e:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004ea0:	4b13      	ldr	r3, [pc, #76]	; (8004ef0 <_SendPacket+0x2d8>)
 8004ea2:	7e1b      	ldrb	r3, [r3, #24]
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4a13      	ldr	r2, [pc, #76]	; (8004ef4 <_SendPacket+0x2dc>)
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	440b      	add	r3, r1
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	336c      	adds	r3, #108	; 0x6c
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <_SendPacket+0x2d8>)
 8004eb8:	7e1b      	ldrb	r3, [r3, #24]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	490d      	ldr	r1, [pc, #52]	; (8004ef4 <_SendPacket+0x2dc>)
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	4403      	add	r3, r0
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	440b      	add	r3, r1
 8004ec8:	3370      	adds	r3, #112	; 0x70
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d00b      	beq.n	8004ee8 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004ed0:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <_SendPacket+0x2d8>)
 8004ed2:	789b      	ldrb	r3, [r3, #2]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d107      	bne.n	8004ee8 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <_SendPacket+0x2d8>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004ede:	f7ff fdb7 	bl	8004a50 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004ee2:	4b03      	ldr	r3, [pc, #12]	; (8004ef0 <_SendPacket+0x2d8>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004ee8:	bf00      	nop
 8004eea:	3728      	adds	r7, #40	; 0x28
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20014384 	.word	0x20014384
 8004ef4:	20012ec4 	.word	0x20012ec4

08004ef8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af02      	add	r7, sp, #8
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004f06:	2300      	movs	r3, #0
 8004f08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f0c:	4917      	ldr	r1, [pc, #92]	; (8004f6c <SEGGER_SYSVIEW_Init+0x74>)
 8004f0e:	4818      	ldr	r0, [pc, #96]	; (8004f70 <SEGGER_SYSVIEW_Init+0x78>)
 8004f10:	f7ff fc92 	bl	8004838 <SEGGER_RTT_AllocUpBuffer>
 8004f14:	4603      	mov	r3, r0
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	4b16      	ldr	r3, [pc, #88]	; (8004f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f1a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004f1c:	4b15      	ldr	r3, [pc, #84]	; (8004f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f1e:	785a      	ldrb	r2, [r3, #1]
 8004f20:	4b14      	ldr	r3, [pc, #80]	; (8004f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f22:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004f24:	4b13      	ldr	r3, [pc, #76]	; (8004f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f26:	7e1b      	ldrb	r3, [r3, #24]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	2308      	movs	r3, #8
 8004f30:	4a11      	ldr	r2, [pc, #68]	; (8004f78 <SEGGER_SYSVIEW_Init+0x80>)
 8004f32:	490f      	ldr	r1, [pc, #60]	; (8004f70 <SEGGER_SYSVIEW_Init+0x78>)
 8004f34:	f7ff fd04 	bl	8004940 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004f38:	4b0e      	ldr	r3, [pc, #56]	; (8004f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004f3e:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <SEGGER_SYSVIEW_Init+0x84>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a0c      	ldr	r2, [pc, #48]	; (8004f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f44:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004f46:	4a0b      	ldr	r2, [pc, #44]	; (8004f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004f4c:	4a09      	ldr	r2, [pc, #36]	; (8004f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004f52:	4a08      	ldr	r2, [pc, #32]	; (8004f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004f58:	4a06      	ldr	r2, [pc, #24]	; (8004f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004f5e:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	2001337c 	.word	0x2001337c
 8004f70:	0800610c 	.word	0x0800610c
 8004f74:	20014384 	.word	0x20014384
 8004f78:	2001437c 	.word	0x2001437c
 8004f7c:	e0001004 	.word	0xe0001004

08004f80 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004f88:	4a04      	ldr	r2, [pc, #16]	; (8004f9c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6113      	str	r3, [r2, #16]
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	20014384 	.word	0x20014384

08004fa0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fa8:	f3ef 8311 	mrs	r3, BASEPRI
 8004fac:	f04f 0120 	mov.w	r1, #32
 8004fb0:	f381 8811 	msr	BASEPRI, r1
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	4808      	ldr	r0, [pc, #32]	; (8004fd8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004fb8:	f7ff fd3e 	bl	8004a38 <_PreparePacket>
 8004fbc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	68b8      	ldr	r0, [r7, #8]
 8004fc4:	f7ff fe28 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f383 8811 	msr	BASEPRI, r3
}
 8004fce:	bf00      	nop
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	200143b4 	.word	0x200143b4

08004fdc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b088      	sub	sp, #32
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8004fea:	f04f 0120 	mov.w	r1, #32
 8004fee:	f381 8811 	msr	BASEPRI, r1
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	4816      	ldr	r0, [pc, #88]	; (8005050 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004ff6:	f7ff fd1f 	bl	8004a38 <_PreparePacket>
 8004ffa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	61fb      	str	r3, [r7, #28]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	61bb      	str	r3, [r7, #24]
 8005008:	e00b      	b.n	8005022 <SEGGER_SYSVIEW_RecordU32+0x46>
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	b2da      	uxtb	r2, r3
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	1c59      	adds	r1, r3, #1
 8005012:	61f9      	str	r1, [r7, #28]
 8005014:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	701a      	strb	r2, [r3, #0]
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	09db      	lsrs	r3, r3, #7
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	2b7f      	cmp	r3, #127	; 0x7f
 8005026:	d8f0      	bhi.n	800500a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	61fa      	str	r2, [r7, #28]
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	701a      	strb	r2, [r3, #0]
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	68f9      	ldr	r1, [r7, #12]
 800503c:	6938      	ldr	r0, [r7, #16]
 800503e:	f7ff fdeb 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f383 8811 	msr	BASEPRI, r3
}
 8005048:	bf00      	nop
 800504a:	3720      	adds	r7, #32
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	200143b4 	.word	0x200143b4

08005054 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b08c      	sub	sp, #48	; 0x30
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005060:	f3ef 8311 	mrs	r3, BASEPRI
 8005064:	f04f 0120 	mov.w	r1, #32
 8005068:	f381 8811 	msr	BASEPRI, r1
 800506c:	61fb      	str	r3, [r7, #28]
 800506e:	4825      	ldr	r0, [pc, #148]	; (8005104 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005070:	f7ff fce2 	bl	8004a38 <_PreparePacket>
 8005074:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	62bb      	str	r3, [r7, #40]	; 0x28
 8005082:	e00b      	b.n	800509c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005086:	b2da      	uxtb	r2, r3
 8005088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508a:	1c59      	adds	r1, r3, #1
 800508c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800508e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	09db      	lsrs	r3, r3, #7
 800509a:	62bb      	str	r3, [r7, #40]	; 0x28
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	2b7f      	cmp	r3, #127	; 0x7f
 80050a0:	d8f0      	bhi.n	8005084 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80050a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]
 80050ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	623b      	str	r3, [r7, #32]
 80050ba:	e00b      	b.n	80050d4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	1c59      	adds	r1, r3, #1
 80050c4:	6279      	str	r1, [r7, #36]	; 0x24
 80050c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	09db      	lsrs	r3, r3, #7
 80050d2:	623b      	str	r3, [r7, #32]
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	2b7f      	cmp	r3, #127	; 0x7f
 80050d8:	d8f0      	bhi.n	80050bc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	627a      	str	r2, [r7, #36]	; 0x24
 80050e0:	6a3a      	ldr	r2, [r7, #32]
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	6979      	ldr	r1, [r7, #20]
 80050ee:	69b8      	ldr	r0, [r7, #24]
 80050f0:	f7ff fd92 	bl	8004c18 <_SendPacket>
  RECORD_END();
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f383 8811 	msr	BASEPRI, r3
}
 80050fa:	bf00      	nop
 80050fc:	3730      	adds	r7, #48	; 0x30
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	200143b4 	.word	0x200143b4

08005108 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005108:	b580      	push	{r7, lr}
 800510a:	b08e      	sub	sp, #56	; 0x38
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005116:	f3ef 8311 	mrs	r3, BASEPRI
 800511a:	f04f 0120 	mov.w	r1, #32
 800511e:	f381 8811 	msr	BASEPRI, r1
 8005122:	61fb      	str	r3, [r7, #28]
 8005124:	4832      	ldr	r0, [pc, #200]	; (80051f0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005126:	f7ff fc87 	bl	8004a38 <_PreparePacket>
 800512a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	637b      	str	r3, [r7, #52]	; 0x34
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	633b      	str	r3, [r7, #48]	; 0x30
 8005138:	e00b      	b.n	8005152 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	b2da      	uxtb	r2, r3
 800513e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005140:	1c59      	adds	r1, r3, #1
 8005142:	6379      	str	r1, [r7, #52]	; 0x34
 8005144:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	701a      	strb	r2, [r3, #0]
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	09db      	lsrs	r3, r3, #7
 8005150:	633b      	str	r3, [r7, #48]	; 0x30
 8005152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005154:	2b7f      	cmp	r3, #127	; 0x7f
 8005156:	d8f0      	bhi.n	800513a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	637a      	str	r2, [r7, #52]	; 0x34
 800515e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005166:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005170:	e00b      	b.n	800518a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	b2da      	uxtb	r2, r3
 8005176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005178:	1c59      	adds	r1, r3, #1
 800517a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800517c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	701a      	strb	r2, [r3, #0]
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005186:	09db      	lsrs	r3, r3, #7
 8005188:	62bb      	str	r3, [r7, #40]	; 0x28
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	2b7f      	cmp	r3, #127	; 0x7f
 800518e:	d8f0      	bhi.n	8005172 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	701a      	strb	r2, [r3, #0]
 800519c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	623b      	str	r3, [r7, #32]
 80051a8:	e00b      	b.n	80051c2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	1c59      	adds	r1, r3, #1
 80051b2:	6279      	str	r1, [r7, #36]	; 0x24
 80051b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	09db      	lsrs	r3, r3, #7
 80051c0:	623b      	str	r3, [r7, #32]
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	2b7f      	cmp	r3, #127	; 0x7f
 80051c6:	d8f0      	bhi.n	80051aa <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	627a      	str	r2, [r7, #36]	; 0x24
 80051ce:	6a3a      	ldr	r2, [r7, #32]
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	6979      	ldr	r1, [r7, #20]
 80051dc:	69b8      	ldr	r0, [r7, #24]
 80051de:	f7ff fd1b 	bl	8004c18 <_SendPacket>
  RECORD_END();
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	f383 8811 	msr	BASEPRI, r3
}
 80051e8:	bf00      	nop
 80051ea:	3738      	adds	r7, #56	; 0x38
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	200143b4 	.word	0x200143b4

080051f4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b090      	sub	sp, #64	; 0x40
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005202:	f3ef 8311 	mrs	r3, BASEPRI
 8005206:	f04f 0120 	mov.w	r1, #32
 800520a:	f381 8811 	msr	BASEPRI, r1
 800520e:	61fb      	str	r3, [r7, #28]
 8005210:	4840      	ldr	r0, [pc, #256]	; (8005314 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005212:	f7ff fc11 	bl	8004a38 <_PreparePacket>
 8005216:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	63bb      	str	r3, [r7, #56]	; 0x38
 8005224:	e00b      	b.n	800523e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005228:	b2da      	uxtb	r2, r3
 800522a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800522c:	1c59      	adds	r1, r3, #1
 800522e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005230:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005234:	b2d2      	uxtb	r2, r2
 8005236:	701a      	strb	r2, [r3, #0]
 8005238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523a:	09db      	lsrs	r3, r3, #7
 800523c:	63bb      	str	r3, [r7, #56]	; 0x38
 800523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005240:	2b7f      	cmp	r3, #127	; 0x7f
 8005242:	d8f0      	bhi.n	8005226 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	63fa      	str	r2, [r7, #60]	; 0x3c
 800524a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	701a      	strb	r2, [r3, #0]
 8005250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005252:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	637b      	str	r3, [r7, #52]	; 0x34
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	633b      	str	r3, [r7, #48]	; 0x30
 800525c:	e00b      	b.n	8005276 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	b2da      	uxtb	r2, r3
 8005262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005264:	1c59      	adds	r1, r3, #1
 8005266:	6379      	str	r1, [r7, #52]	; 0x34
 8005268:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005272:	09db      	lsrs	r3, r3, #7
 8005274:	633b      	str	r3, [r7, #48]	; 0x30
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	2b7f      	cmp	r3, #127	; 0x7f
 800527a:	d8f0      	bhi.n	800525e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800527c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527e:	1c5a      	adds	r2, r3, #1
 8005280:	637a      	str	r2, [r7, #52]	; 0x34
 8005282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	701a      	strb	r2, [r3, #0]
 8005288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	62bb      	str	r3, [r7, #40]	; 0x28
 8005294:	e00b      	b.n	80052ae <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	b2da      	uxtb	r2, r3
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	1c59      	adds	r1, r3, #1
 800529e:	62f9      	str	r1, [r7, #44]	; 0x2c
 80052a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052a4:	b2d2      	uxtb	r2, r2
 80052a6:	701a      	strb	r2, [r3, #0]
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	09db      	lsrs	r3, r3, #7
 80052ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	2b7f      	cmp	r3, #127	; 0x7f
 80052b2:	d8f0      	bhi.n	8005296 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80052b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
 80052c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ca:	623b      	str	r3, [r7, #32]
 80052cc:	e00b      	b.n	80052e6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	1c59      	adds	r1, r3, #1
 80052d6:	6279      	str	r1, [r7, #36]	; 0x24
 80052d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	701a      	strb	r2, [r3, #0]
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	09db      	lsrs	r3, r3, #7
 80052e4:	623b      	str	r3, [r7, #32]
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	2b7f      	cmp	r3, #127	; 0x7f
 80052ea:	d8f0      	bhi.n	80052ce <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	627a      	str	r2, [r7, #36]	; 0x24
 80052f2:	6a3a      	ldr	r2, [r7, #32]
 80052f4:	b2d2      	uxtb	r2, r2
 80052f6:	701a      	strb	r2, [r3, #0]
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	6979      	ldr	r1, [r7, #20]
 8005300:	69b8      	ldr	r0, [r7, #24]
 8005302:	f7ff fc89 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	f383 8811 	msr	BASEPRI, r3
}
 800530c:	bf00      	nop
 800530e:	3740      	adds	r7, #64	; 0x40
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	200143b4 	.word	0x200143b4

08005318 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005318:	b580      	push	{r7, lr}
 800531a:	b08c      	sub	sp, #48	; 0x30
 800531c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800531e:	4b59      	ldr	r3, [pc, #356]	; (8005484 <SEGGER_SYSVIEW_Start+0x16c>)
 8005320:	2201      	movs	r2, #1
 8005322:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005324:	f3ef 8311 	mrs	r3, BASEPRI
 8005328:	f04f 0120 	mov.w	r1, #32
 800532c:	f381 8811 	msr	BASEPRI, r1
 8005330:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005332:	4b54      	ldr	r3, [pc, #336]	; (8005484 <SEGGER_SYSVIEW_Start+0x16c>)
 8005334:	785b      	ldrb	r3, [r3, #1]
 8005336:	220a      	movs	r2, #10
 8005338:	4953      	ldr	r1, [pc, #332]	; (8005488 <SEGGER_SYSVIEW_Start+0x170>)
 800533a:	4618      	mov	r0, r3
 800533c:	f7fa ff48 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005346:	f000 fe09 	bl	8005f5c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800534a:	200a      	movs	r0, #10
 800534c:	f7ff fe28 	bl	8004fa0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005350:	f3ef 8311 	mrs	r3, BASEPRI
 8005354:	f04f 0120 	mov.w	r1, #32
 8005358:	f381 8811 	msr	BASEPRI, r1
 800535c:	60bb      	str	r3, [r7, #8]
 800535e:	484b      	ldr	r0, [pc, #300]	; (800548c <SEGGER_SYSVIEW_Start+0x174>)
 8005360:	f7ff fb6a 	bl	8004a38 <_PreparePacket>
 8005364:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800536e:	4b45      	ldr	r3, [pc, #276]	; (8005484 <SEGGER_SYSVIEW_Start+0x16c>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	62bb      	str	r3, [r7, #40]	; 0x28
 8005374:	e00b      	b.n	800538e <SEGGER_SYSVIEW_Start+0x76>
 8005376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005378:	b2da      	uxtb	r2, r3
 800537a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537c:	1c59      	adds	r1, r3, #1
 800537e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005380:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005384:	b2d2      	uxtb	r2, r2
 8005386:	701a      	strb	r2, [r3, #0]
 8005388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538a:	09db      	lsrs	r3, r3, #7
 800538c:	62bb      	str	r3, [r7, #40]	; 0x28
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	2b7f      	cmp	r3, #127	; 0x7f
 8005392:	d8f0      	bhi.n	8005376 <SEGGER_SYSVIEW_Start+0x5e>
 8005394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	62fa      	str	r2, [r7, #44]	; 0x2c
 800539a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24
 80053a8:	4b36      	ldr	r3, [pc, #216]	; (8005484 <SEGGER_SYSVIEW_Start+0x16c>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	623b      	str	r3, [r7, #32]
 80053ae:	e00b      	b.n	80053c8 <SEGGER_SYSVIEW_Start+0xb0>
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	1c59      	adds	r1, r3, #1
 80053b8:	6279      	str	r1, [r7, #36]	; 0x24
 80053ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	701a      	strb	r2, [r3, #0]
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	09db      	lsrs	r3, r3, #7
 80053c6:	623b      	str	r3, [r7, #32]
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	2b7f      	cmp	r3, #127	; 0x7f
 80053cc:	d8f0      	bhi.n	80053b0 <SEGGER_SYSVIEW_Start+0x98>
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	627a      	str	r2, [r7, #36]	; 0x24
 80053d4:	6a3a      	ldr	r2, [r7, #32]
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	61fb      	str	r3, [r7, #28]
 80053e2:	4b28      	ldr	r3, [pc, #160]	; (8005484 <SEGGER_SYSVIEW_Start+0x16c>)
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	61bb      	str	r3, [r7, #24]
 80053e8:	e00b      	b.n	8005402 <SEGGER_SYSVIEW_Start+0xea>
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	1c59      	adds	r1, r3, #1
 80053f2:	61f9      	str	r1, [r7, #28]
 80053f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	701a      	strb	r2, [r3, #0]
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	09db      	lsrs	r3, r3, #7
 8005400:	61bb      	str	r3, [r7, #24]
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	2b7f      	cmp	r3, #127	; 0x7f
 8005406:	d8f0      	bhi.n	80053ea <SEGGER_SYSVIEW_Start+0xd2>
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	61fa      	str	r2, [r7, #28]
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	2300      	movs	r3, #0
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	e00b      	b.n	800543a <SEGGER_SYSVIEW_Start+0x122>
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	b2da      	uxtb	r2, r3
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	1c59      	adds	r1, r3, #1
 800542a:	6179      	str	r1, [r7, #20]
 800542c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	701a      	strb	r2, [r3, #0]
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	09db      	lsrs	r3, r3, #7
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b7f      	cmp	r3, #127	; 0x7f
 800543e:	d8f0      	bhi.n	8005422 <SEGGER_SYSVIEW_Start+0x10a>
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	617a      	str	r2, [r7, #20]
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	701a      	strb	r2, [r3, #0]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005450:	2218      	movs	r2, #24
 8005452:	6839      	ldr	r1, [r7, #0]
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff fbdf 	bl	8004c18 <_SendPacket>
      RECORD_END();
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005460:	4b08      	ldr	r3, [pc, #32]	; (8005484 <SEGGER_SYSVIEW_Start+0x16c>)
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005468:	4b06      	ldr	r3, [pc, #24]	; (8005484 <SEGGER_SYSVIEW_Start+0x16c>)
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800546e:	f000 f9eb 	bl	8005848 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005472:	f000 f9b1 	bl	80057d8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005476:	f000 fc8d 	bl	8005d94 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800547a:	bf00      	nop
 800547c:	3730      	adds	r7, #48	; 0x30
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20014384 	.word	0x20014384
 8005488:	08006148 	.word	0x08006148
 800548c:	200143b4 	.word	0x200143b4

08005490 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005496:	f3ef 8311 	mrs	r3, BASEPRI
 800549a:	f04f 0120 	mov.w	r1, #32
 800549e:	f381 8811 	msr	BASEPRI, r1
 80054a2:	607b      	str	r3, [r7, #4]
 80054a4:	480b      	ldr	r0, [pc, #44]	; (80054d4 <SEGGER_SYSVIEW_Stop+0x44>)
 80054a6:	f7ff fac7 	bl	8004a38 <_PreparePacket>
 80054aa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80054ac:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <SEGGER_SYSVIEW_Stop+0x48>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d007      	beq.n	80054c4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80054b4:	220b      	movs	r2, #11
 80054b6:	6839      	ldr	r1, [r7, #0]
 80054b8:	6838      	ldr	r0, [r7, #0]
 80054ba:	f7ff fbad 	bl	8004c18 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80054be:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <SEGGER_SYSVIEW_Stop+0x48>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f383 8811 	msr	BASEPRI, r3
}
 80054ca:	bf00      	nop
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	200143b4 	.word	0x200143b4
 80054d8:	20014384 	.word	0x20014384

080054dc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08c      	sub	sp, #48	; 0x30
 80054e0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80054e2:	f3ef 8311 	mrs	r3, BASEPRI
 80054e6:	f04f 0120 	mov.w	r1, #32
 80054ea:	f381 8811 	msr	BASEPRI, r1
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	4845      	ldr	r0, [pc, #276]	; (8005608 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80054f2:	f7ff faa1 	bl	8004a38 <_PreparePacket>
 80054f6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005500:	4b42      	ldr	r3, [pc, #264]	; (800560c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	62bb      	str	r3, [r7, #40]	; 0x28
 8005506:	e00b      	b.n	8005520 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	b2da      	uxtb	r2, r3
 800550c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550e:	1c59      	adds	r1, r3, #1
 8005510:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005512:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	09db      	lsrs	r3, r3, #7
 800551e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005522:	2b7f      	cmp	r3, #127	; 0x7f
 8005524:	d8f0      	bhi.n	8005508 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800552c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005534:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
 800553a:	4b34      	ldr	r3, [pc, #208]	; (800560c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	623b      	str	r3, [r7, #32]
 8005540:	e00b      	b.n	800555a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	b2da      	uxtb	r2, r3
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	1c59      	adds	r1, r3, #1
 800554a:	6279      	str	r1, [r7, #36]	; 0x24
 800554c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	701a      	strb	r2, [r3, #0]
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	09db      	lsrs	r3, r3, #7
 8005558:	623b      	str	r3, [r7, #32]
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	2b7f      	cmp	r3, #127	; 0x7f
 800555e:	d8f0      	bhi.n	8005542 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	627a      	str	r2, [r7, #36]	; 0x24
 8005566:	6a3a      	ldr	r2, [r7, #32]
 8005568:	b2d2      	uxtb	r2, r2
 800556a:	701a      	strb	r2, [r3, #0]
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	61fb      	str	r3, [r7, #28]
 8005574:	4b25      	ldr	r3, [pc, #148]	; (800560c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	e00b      	b.n	8005594 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	b2da      	uxtb	r2, r3
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	1c59      	adds	r1, r3, #1
 8005584:	61f9      	str	r1, [r7, #28]
 8005586:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	09db      	lsrs	r3, r3, #7
 8005592:	61bb      	str	r3, [r7, #24]
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	2b7f      	cmp	r3, #127	; 0x7f
 8005598:	d8f0      	bhi.n	800557c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	61fa      	str	r2, [r7, #28]
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	617b      	str	r3, [r7, #20]
 80055ae:	2300      	movs	r3, #0
 80055b0:	613b      	str	r3, [r7, #16]
 80055b2:	e00b      	b.n	80055cc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	1c59      	adds	r1, r3, #1
 80055bc:	6179      	str	r1, [r7, #20]
 80055be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	09db      	lsrs	r3, r3, #7
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	2b7f      	cmp	r3, #127	; 0x7f
 80055d0:	d8f0      	bhi.n	80055b4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	617a      	str	r2, [r7, #20]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80055e2:	2218      	movs	r2, #24
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	68b8      	ldr	r0, [r7, #8]
 80055e8:	f7ff fb16 	bl	8004c18 <_SendPacket>
  RECORD_END();
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80055f2:	4b06      	ldr	r3, [pc, #24]	; (800560c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80055fa:	4b04      	ldr	r3, [pc, #16]	; (800560c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	4798      	blx	r3
  }
}
 8005600:	bf00      	nop
 8005602:	3730      	adds	r7, #48	; 0x30
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	200143b4 	.word	0x200143b4
 800560c:	20014384 	.word	0x20014384

08005610 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005610:	b580      	push	{r7, lr}
 8005612:	b092      	sub	sp, #72	; 0x48
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005618:	f3ef 8311 	mrs	r3, BASEPRI
 800561c:	f04f 0120 	mov.w	r1, #32
 8005620:	f381 8811 	msr	BASEPRI, r1
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	486a      	ldr	r0, [pc, #424]	; (80057d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005628:	f7ff fa06 	bl	8004a38 <_PreparePacket>
 800562c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	647b      	str	r3, [r7, #68]	; 0x44
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	4b66      	ldr	r3, [pc, #408]	; (80057d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	643b      	str	r3, [r7, #64]	; 0x40
 8005642:	e00b      	b.n	800565c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005646:	b2da      	uxtb	r2, r3
 8005648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800564a:	1c59      	adds	r1, r3, #1
 800564c:	6479      	str	r1, [r7, #68]	; 0x44
 800564e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005658:	09db      	lsrs	r3, r3, #7
 800565a:	643b      	str	r3, [r7, #64]	; 0x40
 800565c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800565e:	2b7f      	cmp	r3, #127	; 0x7f
 8005660:	d8f0      	bhi.n	8005644 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	647a      	str	r2, [r7, #68]	; 0x44
 8005668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005670:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	63bb      	str	r3, [r7, #56]	; 0x38
 800567c:	e00b      	b.n	8005696 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800567e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005680:	b2da      	uxtb	r2, r3
 8005682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005684:	1c59      	adds	r1, r3, #1
 8005686:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005688:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	701a      	strb	r2, [r3, #0]
 8005690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005692:	09db      	lsrs	r3, r3, #7
 8005694:	63bb      	str	r3, [r7, #56]	; 0x38
 8005696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005698:	2b7f      	cmp	r3, #127	; 0x7f
 800569a:	d8f0      	bhi.n	800567e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800569c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	701a      	strb	r2, [r3, #0]
 80056a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056aa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	4619      	mov	r1, r3
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f7ff f98f 	bl	80049d8 <_EncodeStr>
 80056ba:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80056bc:	2209      	movs	r2, #9
 80056be:	68f9      	ldr	r1, [r7, #12]
 80056c0:	6938      	ldr	r0, [r7, #16]
 80056c2:	f7ff faa9 	bl	8004c18 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	637b      	str	r3, [r7, #52]	; 0x34
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	4b40      	ldr	r3, [pc, #256]	; (80057d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	633b      	str	r3, [r7, #48]	; 0x30
 80056da:	e00b      	b.n	80056f4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e2:	1c59      	adds	r1, r3, #1
 80056e4:	6379      	str	r1, [r7, #52]	; 0x34
 80056e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	701a      	strb	r2, [r3, #0]
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	09db      	lsrs	r3, r3, #7
 80056f2:	633b      	str	r3, [r7, #48]	; 0x30
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	2b7f      	cmp	r3, #127	; 0x7f
 80056f8:	d8f0      	bhi.n	80056dc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80056fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	637a      	str	r2, [r7, #52]	; 0x34
 8005700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005708:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	62bb      	str	r3, [r7, #40]	; 0x28
 8005714:	e00b      	b.n	800572e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	b2da      	uxtb	r2, r3
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571c:	1c59      	adds	r1, r3, #1
 800571e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005720:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]
 8005728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572a:	09db      	lsrs	r3, r3, #7
 800572c:	62bb      	str	r3, [r7, #40]	; 0x28
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	2b7f      	cmp	r3, #127	; 0x7f
 8005732:	d8f0      	bhi.n	8005716 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	62fa      	str	r2, [r7, #44]	; 0x2c
 800573a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]
 8005740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005742:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	623b      	str	r3, [r7, #32]
 800574e:	e00b      	b.n	8005768 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	b2da      	uxtb	r2, r3
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	1c59      	adds	r1, r3, #1
 8005758:	6279      	str	r1, [r7, #36]	; 0x24
 800575a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	09db      	lsrs	r3, r3, #7
 8005766:	623b      	str	r3, [r7, #32]
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	2b7f      	cmp	r3, #127	; 0x7f
 800576c:	d8f0      	bhi.n	8005750 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	627a      	str	r2, [r7, #36]	; 0x24
 8005774:	6a3a      	ldr	r2, [r7, #32]
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	61fb      	str	r3, [r7, #28]
 8005782:	2300      	movs	r3, #0
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	e00b      	b.n	80057a0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	b2da      	uxtb	r2, r3
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	1c59      	adds	r1, r3, #1
 8005790:	61f9      	str	r1, [r7, #28]
 8005792:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	701a      	strb	r2, [r3, #0]
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	09db      	lsrs	r3, r3, #7
 800579e:	61bb      	str	r3, [r7, #24]
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	2b7f      	cmp	r3, #127	; 0x7f
 80057a4:	d8f0      	bhi.n	8005788 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	61fa      	str	r2, [r7, #28]
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	701a      	strb	r2, [r3, #0]
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80057b6:	2215      	movs	r2, #21
 80057b8:	68f9      	ldr	r1, [r7, #12]
 80057ba:	6938      	ldr	r0, [r7, #16]
 80057bc:	f7ff fa2c 	bl	8004c18 <_SendPacket>
  RECORD_END();
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f383 8811 	msr	BASEPRI, r3
}
 80057c6:	bf00      	nop
 80057c8:	3748      	adds	r7, #72	; 0x48
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	200143b4 	.word	0x200143b4
 80057d4:	20014384 	.word	0x20014384

080057d8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80057dc:	4b07      	ldr	r3, [pc, #28]	; (80057fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d008      	beq.n	80057f6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80057e4:	4b05      	ldr	r3, [pc, #20]	; (80057fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80057ee:	4b03      	ldr	r3, [pc, #12]	; (80057fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	4798      	blx	r3
  }
}
 80057f6:	bf00      	nop
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20014384 	.word	0x20014384

08005800 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005808:	f3ef 8311 	mrs	r3, BASEPRI
 800580c:	f04f 0120 	mov.w	r1, #32
 8005810:	f381 8811 	msr	BASEPRI, r1
 8005814:	617b      	str	r3, [r7, #20]
 8005816:	480b      	ldr	r0, [pc, #44]	; (8005844 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005818:	f7ff f90e 	bl	8004a38 <_PreparePacket>
 800581c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800581e:	2280      	movs	r2, #128	; 0x80
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	6938      	ldr	r0, [r7, #16]
 8005824:	f7ff f8d8 	bl	80049d8 <_EncodeStr>
 8005828:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800582a:	220e      	movs	r2, #14
 800582c:	68f9      	ldr	r1, [r7, #12]
 800582e:	6938      	ldr	r0, [r7, #16]
 8005830:	f7ff f9f2 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f383 8811 	msr	BASEPRI, r3
}
 800583a:	bf00      	nop
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	200143b4 	.word	0x200143b4

08005848 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005848:	b590      	push	{r4, r7, lr}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800584e:	4b15      	ldr	r3, [pc, #84]	; (80058a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01a      	beq.n	800588c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005856:	4b13      	ldr	r3, [pc, #76]	; (80058a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d015      	beq.n	800588c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005860:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4798      	blx	r3
 8005868:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800586c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800586e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	f04f 0300 	mov.w	r3, #0
 800587a:	000a      	movs	r2, r1
 800587c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800587e:	4613      	mov	r3, r2
 8005880:	461a      	mov	r2, r3
 8005882:	4621      	mov	r1, r4
 8005884:	200d      	movs	r0, #13
 8005886:	f7ff fbe5 	bl	8005054 <SEGGER_SYSVIEW_RecordU32x2>
 800588a:	e006      	b.n	800589a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800588c:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4619      	mov	r1, r3
 8005892:	200c      	movs	r0, #12
 8005894:	f7ff fba2 	bl	8004fdc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005898:	bf00      	nop
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd90      	pop	{r4, r7, pc}
 80058a2:	bf00      	nop
 80058a4:	20014384 	.word	0x20014384
 80058a8:	e0001004 	.word	0xe0001004

080058ac <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058b2:	f3ef 8311 	mrs	r3, BASEPRI
 80058b6:	f04f 0120 	mov.w	r1, #32
 80058ba:	f381 8811 	msr	BASEPRI, r1
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	4819      	ldr	r0, [pc, #100]	; (8005928 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80058c2:	f7ff f8b9 	bl	8004a38 <_PreparePacket>
 80058c6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80058cc:	4b17      	ldr	r3, [pc, #92]	; (800592c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	613b      	str	r3, [r7, #16]
 80058de:	e00b      	b.n	80058f8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	1c59      	adds	r1, r3, #1
 80058e8:	6179      	str	r1, [r7, #20]
 80058ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	09db      	lsrs	r3, r3, #7
 80058f6:	613b      	str	r3, [r7, #16]
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	2b7f      	cmp	r3, #127	; 0x7f
 80058fc:	d8f0      	bhi.n	80058e0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	617a      	str	r2, [r7, #20]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800590e:	2202      	movs	r2, #2
 8005910:	6879      	ldr	r1, [r7, #4]
 8005912:	68b8      	ldr	r0, [r7, #8]
 8005914:	f7ff f980 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f383 8811 	msr	BASEPRI, r3
}
 800591e:	bf00      	nop
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	200143b4 	.word	0x200143b4
 800592c:	e000ed04 	.word	0xe000ed04

08005930 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005936:	f3ef 8311 	mrs	r3, BASEPRI
 800593a:	f04f 0120 	mov.w	r1, #32
 800593e:	f381 8811 	msr	BASEPRI, r1
 8005942:	607b      	str	r3, [r7, #4]
 8005944:	4807      	ldr	r0, [pc, #28]	; (8005964 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005946:	f7ff f877 	bl	8004a38 <_PreparePacket>
 800594a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800594c:	2203      	movs	r2, #3
 800594e:	6839      	ldr	r1, [r7, #0]
 8005950:	6838      	ldr	r0, [r7, #0]
 8005952:	f7ff f961 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f383 8811 	msr	BASEPRI, r3
}
 800595c:	bf00      	nop
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	200143b4 	.word	0x200143b4

08005968 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800596e:	f3ef 8311 	mrs	r3, BASEPRI
 8005972:	f04f 0120 	mov.w	r1, #32
 8005976:	f381 8811 	msr	BASEPRI, r1
 800597a:	607b      	str	r3, [r7, #4]
 800597c:	4807      	ldr	r0, [pc, #28]	; (800599c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800597e:	f7ff f85b 	bl	8004a38 <_PreparePacket>
 8005982:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005984:	2212      	movs	r2, #18
 8005986:	6839      	ldr	r1, [r7, #0]
 8005988:	6838      	ldr	r0, [r7, #0]
 800598a:	f7ff f945 	bl	8004c18 <_SendPacket>
  RECORD_END();
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f383 8811 	msr	BASEPRI, r3
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	200143b4 	.word	0x200143b4

080059a0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80059a6:	f3ef 8311 	mrs	r3, BASEPRI
 80059aa:	f04f 0120 	mov.w	r1, #32
 80059ae:	f381 8811 	msr	BASEPRI, r1
 80059b2:	607b      	str	r3, [r7, #4]
 80059b4:	4807      	ldr	r0, [pc, #28]	; (80059d4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80059b6:	f7ff f83f 	bl	8004a38 <_PreparePacket>
 80059ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80059bc:	2211      	movs	r2, #17
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	6838      	ldr	r0, [r7, #0]
 80059c2:	f7ff f929 	bl	8004c18 <_SendPacket>
  RECORD_END();
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f383 8811 	msr	BASEPRI, r3
}
 80059cc:	bf00      	nop
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	200143b4 	.word	0x200143b4

080059d8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80059e0:	f3ef 8311 	mrs	r3, BASEPRI
 80059e4:	f04f 0120 	mov.w	r1, #32
 80059e8:	f381 8811 	msr	BASEPRI, r1
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	4819      	ldr	r0, [pc, #100]	; (8005a54 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80059f0:	f7ff f822 	bl	8004a38 <_PreparePacket>
 80059f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80059fa:	4b17      	ldr	r3, [pc, #92]	; (8005a58 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	61fb      	str	r3, [r7, #28]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	61bb      	str	r3, [r7, #24]
 8005a0c:	e00b      	b.n	8005a26 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	1c59      	adds	r1, r3, #1
 8005a16:	61f9      	str	r1, [r7, #28]
 8005a18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	701a      	strb	r2, [r3, #0]
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	09db      	lsrs	r3, r3, #7
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	2b7f      	cmp	r3, #127	; 0x7f
 8005a2a:	d8f0      	bhi.n	8005a0e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	61fa      	str	r2, [r7, #28]
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005a3c:	2208      	movs	r2, #8
 8005a3e:	68f9      	ldr	r1, [r7, #12]
 8005a40:	6938      	ldr	r0, [r7, #16]
 8005a42:	f7ff f8e9 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f383 8811 	msr	BASEPRI, r3
}
 8005a4c:	bf00      	nop
 8005a4e:	3720      	adds	r7, #32
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	200143b4 	.word	0x200143b4
 8005a58:	20014384 	.word	0x20014384

08005a5c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b088      	sub	sp, #32
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a64:	f3ef 8311 	mrs	r3, BASEPRI
 8005a68:	f04f 0120 	mov.w	r1, #32
 8005a6c:	f381 8811 	msr	BASEPRI, r1
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	4819      	ldr	r0, [pc, #100]	; (8005ad8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005a74:	f7fe ffe0 	bl	8004a38 <_PreparePacket>
 8005a78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005a7e:	4b17      	ldr	r3, [pc, #92]	; (8005adc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	61fb      	str	r3, [r7, #28]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	e00b      	b.n	8005aaa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	1c59      	adds	r1, r3, #1
 8005a9a:	61f9      	str	r1, [r7, #28]
 8005a9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	09db      	lsrs	r3, r3, #7
 8005aa8:	61bb      	str	r3, [r7, #24]
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	2b7f      	cmp	r3, #127	; 0x7f
 8005aae:	d8f0      	bhi.n	8005a92 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	61fa      	str	r2, [r7, #28]
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	68f9      	ldr	r1, [r7, #12]
 8005ac4:	6938      	ldr	r0, [r7, #16]
 8005ac6:	f7ff f8a7 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f383 8811 	msr	BASEPRI, r3
}
 8005ad0:	bf00      	nop
 8005ad2:	3720      	adds	r7, #32
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	200143b4 	.word	0x200143b4
 8005adc:	20014384 	.word	0x20014384

08005ae0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ae8:	f3ef 8311 	mrs	r3, BASEPRI
 8005aec:	f04f 0120 	mov.w	r1, #32
 8005af0:	f381 8811 	msr	BASEPRI, r1
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	4819      	ldr	r0, [pc, #100]	; (8005b5c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005af8:	f7fe ff9e 	bl	8004a38 <_PreparePacket>
 8005afc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005b02:	4b17      	ldr	r3, [pc, #92]	; (8005b60 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	61fb      	str	r3, [r7, #28]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	61bb      	str	r3, [r7, #24]
 8005b14:	e00b      	b.n	8005b2e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	1c59      	adds	r1, r3, #1
 8005b1e:	61f9      	str	r1, [r7, #28]
 8005b20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	09db      	lsrs	r3, r3, #7
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	2b7f      	cmp	r3, #127	; 0x7f
 8005b32:	d8f0      	bhi.n	8005b16 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	61fa      	str	r2, [r7, #28]
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	b2d2      	uxtb	r2, r2
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005b44:	2206      	movs	r2, #6
 8005b46:	68f9      	ldr	r1, [r7, #12]
 8005b48:	6938      	ldr	r0, [r7, #16]
 8005b4a:	f7ff f865 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f383 8811 	msr	BASEPRI, r3
}
 8005b54:	bf00      	nop
 8005b56:	3720      	adds	r7, #32
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	200143b4 	.word	0x200143b4
 8005b60:	20014384 	.word	0x20014384

08005b64 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08a      	sub	sp, #40	; 0x28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b6e:	f3ef 8311 	mrs	r3, BASEPRI
 8005b72:	f04f 0120 	mov.w	r1, #32
 8005b76:	f381 8811 	msr	BASEPRI, r1
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	4827      	ldr	r0, [pc, #156]	; (8005c1c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005b7e:	f7fe ff5b 	bl	8004a38 <_PreparePacket>
 8005b82:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005b88:	4b25      	ldr	r3, [pc, #148]	; (8005c20 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	623b      	str	r3, [r7, #32]
 8005b9a:	e00b      	b.n	8005bb4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	1c59      	adds	r1, r3, #1
 8005ba4:	6279      	str	r1, [r7, #36]	; 0x24
 8005ba6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	09db      	lsrs	r3, r3, #7
 8005bb2:	623b      	str	r3, [r7, #32]
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	2b7f      	cmp	r3, #127	; 0x7f
 8005bb8:	d8f0      	bhi.n	8005b9c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	627a      	str	r2, [r7, #36]	; 0x24
 8005bc0:	6a3a      	ldr	r2, [r7, #32]
 8005bc2:	b2d2      	uxtb	r2, r2
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	61fb      	str	r3, [r7, #28]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	61bb      	str	r3, [r7, #24]
 8005bd2:	e00b      	b.n	8005bec <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	1c59      	adds	r1, r3, #1
 8005bdc:	61f9      	str	r1, [r7, #28]
 8005bde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	09db      	lsrs	r3, r3, #7
 8005bea:	61bb      	str	r3, [r7, #24]
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	2b7f      	cmp	r3, #127	; 0x7f
 8005bf0:	d8f0      	bhi.n	8005bd4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	61fa      	str	r2, [r7, #28]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	701a      	strb	r2, [r3, #0]
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005c02:	2207      	movs	r2, #7
 8005c04:	68f9      	ldr	r1, [r7, #12]
 8005c06:	6938      	ldr	r0, [r7, #16]
 8005c08:	f7ff f806 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f383 8811 	msr	BASEPRI, r3
}
 8005c12:	bf00      	nop
 8005c14:	3728      	adds	r7, #40	; 0x28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	200143b4 	.word	0x200143b4
 8005c20:	20014384 	.word	0x20014384

08005c24 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005c2c:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	1ad3      	subs	r3, r2, r3
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	20014384 	.word	0x20014384

08005c44 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08c      	sub	sp, #48	; 0x30
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005c4e:	4b40      	ldr	r3, [pc, #256]	; (8005d50 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d077      	beq.n	8005d46 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005c56:	4b3e      	ldr	r3, [pc, #248]	; (8005d50 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c60:	e008      	b.n	8005c74 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d007      	beq.n	8005c7e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c70:	3301      	adds	r3, #1
 8005c72:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d3f2      	bcc.n	8005c62 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005c7c:	e000      	b.n	8005c80 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005c7e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d055      	beq.n	8005d32 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c86:	f3ef 8311 	mrs	r3, BASEPRI
 8005c8a:	f04f 0120 	mov.w	r1, #32
 8005c8e:	f381 8811 	msr	BASEPRI, r1
 8005c92:	617b      	str	r3, [r7, #20]
 8005c94:	482f      	ldr	r0, [pc, #188]	; (8005d54 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005c96:	f7fe fecf 	bl	8004a38 <_PreparePacket>
 8005c9a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca4:	79fb      	ldrb	r3, [r7, #7]
 8005ca6:	623b      	str	r3, [r7, #32]
 8005ca8:	e00b      	b.n	8005cc2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	1c59      	adds	r1, r3, #1
 8005cb2:	6279      	str	r1, [r7, #36]	; 0x24
 8005cb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	701a      	strb	r2, [r3, #0]
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	09db      	lsrs	r3, r3, #7
 8005cc0:	623b      	str	r3, [r7, #32]
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc6:	d8f0      	bhi.n	8005caa <SEGGER_SYSVIEW_SendModule+0x66>
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	627a      	str	r2, [r7, #36]	; 0x24
 8005cce:	6a3a      	ldr	r2, [r7, #32]
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	701a      	strb	r2, [r3, #0]
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	61fb      	str	r3, [r7, #28]
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	61bb      	str	r3, [r7, #24]
 8005ce2:	e00b      	b.n	8005cfc <SEGGER_SYSVIEW_SendModule+0xb8>
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	1c59      	adds	r1, r3, #1
 8005cec:	61f9      	str	r1, [r7, #28]
 8005cee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cf2:	b2d2      	uxtb	r2, r2
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	09db      	lsrs	r3, r3, #7
 8005cfa:	61bb      	str	r3, [r7, #24]
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8005d00:	d8f0      	bhi.n	8005ce4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	61fa      	str	r2, [r7, #28]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	701a      	strb	r2, [r3, #0]
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2280      	movs	r2, #128	; 0x80
 8005d18:	4619      	mov	r1, r3
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f7fe fe5c 	bl	80049d8 <_EncodeStr>
 8005d20:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005d22:	2216      	movs	r2, #22
 8005d24:	68f9      	ldr	r1, [r7, #12]
 8005d26:	6938      	ldr	r0, [r7, #16]
 8005d28:	f7fe ff76 	bl	8004c18 <_SendPacket>
      RECORD_END();
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d006      	beq.n	8005d46 <SEGGER_SYSVIEW_SendModule+0x102>
 8005d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	4798      	blx	r3
    }
  }
}
 8005d46:	bf00      	nop
 8005d48:	3730      	adds	r7, #48	; 0x30
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	200143ac 	.word	0x200143ac
 8005d54:	200143b4 	.word	0x200143b4

08005d58 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005d5e:	4b0c      	ldr	r3, [pc, #48]	; (8005d90 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00f      	beq.n	8005d86 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005d66:	4b0a      	ldr	r3, [pc, #40]	; (8005d90 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1f2      	bne.n	8005d6c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	200143ac 	.word	0x200143ac

08005d94 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005d9a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d9e:	f04f 0120 	mov.w	r1, #32
 8005da2:	f381 8811 	msr	BASEPRI, r1
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	4817      	ldr	r0, [pc, #92]	; (8005e08 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005daa:	f7fe fe45 	bl	8004a38 <_PreparePacket>
 8005dae:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	4b14      	ldr	r3, [pc, #80]	; (8005e0c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	613b      	str	r3, [r7, #16]
 8005dbe:	e00b      	b.n	8005dd8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	1c59      	adds	r1, r3, #1
 8005dc8:	6179      	str	r1, [r7, #20]
 8005dca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	09db      	lsrs	r3, r3, #7
 8005dd6:	613b      	str	r3, [r7, #16]
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	2b7f      	cmp	r3, #127	; 0x7f
 8005ddc:	d8f0      	bhi.n	8005dc0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	1c5a      	adds	r2, r3, #1
 8005de2:	617a      	str	r2, [r7, #20]
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005dee:	221b      	movs	r2, #27
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	68b8      	ldr	r0, [r7, #8]
 8005df4:	f7fe ff10 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f383 8811 	msr	BASEPRI, r3
}
 8005dfe:	bf00      	nop
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	200143b4 	.word	0x200143b4
 8005e0c:	200143b0 	.word	0x200143b0

08005e10 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08a      	sub	sp, #40	; 0x28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e18:	f3ef 8311 	mrs	r3, BASEPRI
 8005e1c:	f04f 0120 	mov.w	r1, #32
 8005e20:	f381 8811 	msr	BASEPRI, r1
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	4827      	ldr	r0, [pc, #156]	; (8005ec4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005e28:	f7fe fe06 	bl	8004a38 <_PreparePacket>
 8005e2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e2e:	2280      	movs	r2, #128	; 0x80
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	6938      	ldr	r0, [r7, #16]
 8005e34:	f7fe fdd0 	bl	80049d8 <_EncodeStr>
 8005e38:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e3e:	2301      	movs	r3, #1
 8005e40:	623b      	str	r3, [r7, #32]
 8005e42:	e00b      	b.n	8005e5c <SEGGER_SYSVIEW_Warn+0x4c>
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	1c59      	adds	r1, r3, #1
 8005e4c:	6279      	str	r1, [r7, #36]	; 0x24
 8005e4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	701a      	strb	r2, [r3, #0]
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	09db      	lsrs	r3, r3, #7
 8005e5a:	623b      	str	r3, [r7, #32]
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e60:	d8f0      	bhi.n	8005e44 <SEGGER_SYSVIEW_Warn+0x34>
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	627a      	str	r2, [r7, #36]	; 0x24
 8005e68:	6a3a      	ldr	r2, [r7, #32]
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	61fb      	str	r3, [r7, #28]
 8005e76:	2300      	movs	r3, #0
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	e00b      	b.n	8005e94 <SEGGER_SYSVIEW_Warn+0x84>
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	1c59      	adds	r1, r3, #1
 8005e84:	61f9      	str	r1, [r7, #28]
 8005e86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	09db      	lsrs	r3, r3, #7
 8005e92:	61bb      	str	r3, [r7, #24]
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	2b7f      	cmp	r3, #127	; 0x7f
 8005e98:	d8f0      	bhi.n	8005e7c <SEGGER_SYSVIEW_Warn+0x6c>
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	61fa      	str	r2, [r7, #28]
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005eaa:	221a      	movs	r2, #26
 8005eac:	68f9      	ldr	r1, [r7, #12]
 8005eae:	6938      	ldr	r0, [r7, #16]
 8005eb0:	f7fe feb2 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f383 8811 	msr	BASEPRI, r3
}
 8005eba:	bf00      	nop
 8005ebc:	3728      	adds	r7, #40	; 0x28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	200143b4 	.word	0x200143b4

08005ec8 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005ece:	4b1e      	ldr	r3, [pc, #120]	; (8005f48 <USART2_IRQHandler+0x80>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d011      	beq.n	8005f02 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005ede:	4b1b      	ldr	r3, [pc, #108]	; (8005f4c <USART2_IRQHandler+0x84>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f003 030b 	and.w	r3, r3, #11
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d108      	bne.n	8005f02 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005ef0:	4b17      	ldr	r3, [pc, #92]	; (8005f50 <USART2_IRQHandler+0x88>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d004      	beq.n	8005f02 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005ef8:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <USART2_IRQHandler+0x88>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	79fa      	ldrb	r2, [r7, #7]
 8005efe:	4610      	mov	r0, r2
 8005f00:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01a      	beq.n	8005f42 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005f0c:	4b11      	ldr	r3, [pc, #68]	; (8005f54 <USART2_IRQHandler+0x8c>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d015      	beq.n	8005f40 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005f14:	4b0f      	ldr	r3, [pc, #60]	; (8005f54 <USART2_IRQHandler+0x8c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	1dfa      	adds	r2, r7, #7
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	4798      	blx	r3
 8005f1e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d106      	bne.n	8005f34 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005f26:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <USART2_IRQHandler+0x90>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a0b      	ldr	r2, [pc, #44]	; (8005f58 <USART2_IRQHandler+0x90>)
 8005f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	e006      	b.n	8005f42 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005f34:	4b04      	ldr	r3, [pc, #16]	; (8005f48 <USART2_IRQHandler+0x80>)
 8005f36:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005f38:	79fa      	ldrb	r2, [r7, #7]
 8005f3a:	4b04      	ldr	r3, [pc, #16]	; (8005f4c <USART2_IRQHandler+0x84>)
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	e000      	b.n	8005f42 <USART2_IRQHandler+0x7a>
      return;
 8005f40:	bf00      	nop
    }
  }
}
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	40004400 	.word	0x40004400
 8005f4c:	40004404 	.word	0x40004404
 8005f50:	20014498 	.word	0x20014498
 8005f54:	2001449c 	.word	0x2001449c
 8005f58:	4000440c 	.word	0x4000440c

08005f5c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005f60:	4b05      	ldr	r3, [pc, #20]	; (8005f78 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a04      	ldr	r2, [pc, #16]	; (8005f78 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f6a:	6013      	str	r3, [r2, #0]
}
 8005f6c:	bf00      	nop
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	4000440c 	.word	0x4000440c

08005f7c <__libc_init_array>:
 8005f7c:	b570      	push	{r4, r5, r6, lr}
 8005f7e:	4d0d      	ldr	r5, [pc, #52]	; (8005fb4 <__libc_init_array+0x38>)
 8005f80:	4c0d      	ldr	r4, [pc, #52]	; (8005fb8 <__libc_init_array+0x3c>)
 8005f82:	1b64      	subs	r4, r4, r5
 8005f84:	10a4      	asrs	r4, r4, #2
 8005f86:	2600      	movs	r6, #0
 8005f88:	42a6      	cmp	r6, r4
 8005f8a:	d109      	bne.n	8005fa0 <__libc_init_array+0x24>
 8005f8c:	4d0b      	ldr	r5, [pc, #44]	; (8005fbc <__libc_init_array+0x40>)
 8005f8e:	4c0c      	ldr	r4, [pc, #48]	; (8005fc0 <__libc_init_array+0x44>)
 8005f90:	f000 f83e 	bl	8006010 <_init>
 8005f94:	1b64      	subs	r4, r4, r5
 8005f96:	10a4      	asrs	r4, r4, #2
 8005f98:	2600      	movs	r6, #0
 8005f9a:	42a6      	cmp	r6, r4
 8005f9c:	d105      	bne.n	8005faa <__libc_init_array+0x2e>
 8005f9e:	bd70      	pop	{r4, r5, r6, pc}
 8005fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa4:	4798      	blx	r3
 8005fa6:	3601      	adds	r6, #1
 8005fa8:	e7ee      	b.n	8005f88 <__libc_init_array+0xc>
 8005faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fae:	4798      	blx	r3
 8005fb0:	3601      	adds	r6, #1
 8005fb2:	e7f2      	b.n	8005f9a <__libc_init_array+0x1e>
 8005fb4:	0800615c 	.word	0x0800615c
 8005fb8:	0800615c 	.word	0x0800615c
 8005fbc:	0800615c 	.word	0x0800615c
 8005fc0:	08006160 	.word	0x08006160

08005fc4 <memcmp>:
 8005fc4:	b510      	push	{r4, lr}
 8005fc6:	3901      	subs	r1, #1
 8005fc8:	4402      	add	r2, r0
 8005fca:	4290      	cmp	r0, r2
 8005fcc:	d101      	bne.n	8005fd2 <memcmp+0xe>
 8005fce:	2000      	movs	r0, #0
 8005fd0:	e005      	b.n	8005fde <memcmp+0x1a>
 8005fd2:	7803      	ldrb	r3, [r0, #0]
 8005fd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005fd8:	42a3      	cmp	r3, r4
 8005fda:	d001      	beq.n	8005fe0 <memcmp+0x1c>
 8005fdc:	1b18      	subs	r0, r3, r4
 8005fde:	bd10      	pop	{r4, pc}
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	e7f2      	b.n	8005fca <memcmp+0x6>

08005fe4 <memcpy>:
 8005fe4:	440a      	add	r2, r1
 8005fe6:	4291      	cmp	r1, r2
 8005fe8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005fec:	d100      	bne.n	8005ff0 <memcpy+0xc>
 8005fee:	4770      	bx	lr
 8005ff0:	b510      	push	{r4, lr}
 8005ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ff6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ffa:	4291      	cmp	r1, r2
 8005ffc:	d1f9      	bne.n	8005ff2 <memcpy+0xe>
 8005ffe:	bd10      	pop	{r4, pc}

08006000 <memset>:
 8006000:	4402      	add	r2, r0
 8006002:	4603      	mov	r3, r0
 8006004:	4293      	cmp	r3, r2
 8006006:	d100      	bne.n	800600a <memset+0xa>
 8006008:	4770      	bx	lr
 800600a:	f803 1b01 	strb.w	r1, [r3], #1
 800600e:	e7f9      	b.n	8006004 <memset+0x4>

08006010 <_init>:
 8006010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006012:	bf00      	nop
 8006014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006016:	bc08      	pop	{r3}
 8006018:	469e      	mov	lr, r3
 800601a:	4770      	bx	lr

0800601c <_fini>:
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601e:	bf00      	nop
 8006020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006022:	bc08      	pop	{r3}
 8006024:	469e      	mov	lr, r3
 8006026:	4770      	bx	lr
